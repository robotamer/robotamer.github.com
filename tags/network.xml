<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Network on RoboTamer </title>
    <link>http://www.robotamer.com/tags/network.xml</link>
    <language>en-us</language>
    <author>Dennis T Kaplan</author>
    <rights>Copyright (c) 2008 - 2013, Dennis T Kaplan; all rights reserved.</rights>
    <updated>2012-06-27 22:57:08 &#43;0000 UTC</updated>
    
    <item>
      <title>Network Safety Restart Bash Script</title>
      <link>http://www.robotamer.com/linux/nsr.html</link>
      <pubDate>Wed, 27 Jun 2012 22:57:08 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/linux/nsr.html</guid>
      <description>&lt;p&gt;If you ever work on a remote servers network settings then this script may safe you from having to call support, and waiting on them.&lt;/p&gt;

&lt;p&gt;When started/executed it&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sleeps first for 1 hour&lt;/li&gt;
&lt;li&gt;Then it renames the ”/etc/network/interfaces” file by adding the current time stamp to the end of the file&lt;/li&gt;
&lt;li&gt;It renames a file called ”/etc/network/interfaces.org” to ”/etc/network/interfaces”&lt;/li&gt;
&lt;li&gt;And finally it restarts the server.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It also warns you a couple minutes before it does all that so you can terminate the program. Of course if you have been locked out you can&amp;rsquo;t terminate it, and it will execute. &lt;em&gt;Giving you a fresh start!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;To start&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;network_Safety_Restart.sh start &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To Stop&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;network_Safety_Restart.sh stop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the linkto the &lt;a href=&#34;https://gist.github.com/robotamer/1479769&#34;&gt;Gist&lt;/a&gt; or you can just copy and paste from below.&lt;/p&gt;

&lt;p&gt;network_Safety_Restart.sh&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#! /bin/sh

PATH=/sbin:/usr/sbin:/bin:/usr/bin

. /lib/lsb/init-functions

export PIDFILESTART=/tmp/network-safty-restart-start.pid
export PIDFILESTOP=/tmp/network-safty-restart-stop.pid
export FILE=/etc/network/interfaces

case &amp;quot;$1&amp;quot; in
  start)  
    if [ -f ${PIDFILESTART} ]; then
            rm ${PIDFILESTART}
    fi
    if [ -f ${PIDFILESTOP} ]; then
            rm ${PIDFILESTOP}
    fi  
    ps -fe | grep ${1} | head -n1 | cut -d&amp;quot; &amp;quot; -f 6 &amp;gt; ${PIDFILESTART}

        sleep 3600 

        log_action_msg &amp;quot;WARNING: Will in 120 sec rename ${FILE} and then restart&amp;quot;
        sleep 60
        log_action_msg &amp;quot;WARNING: Will in 60 sec rename ${FILE} and then restart&amp;quot;
        sleep 60

    if ! [ -f ${PIDFILESTOP} ]; then
        log_action_msg &amp;quot;Restarting NOW&amp;quot;
            SUFFIX=$(date +%s)
            cp ${FILE} ${FILE}.${SUFFIX}
            sleep 1
            cp ${FILE}.org ${FILE}
            sleep 1
            reboot -d -f -i
    else
        rm ${PIDFILESTOP}
        log_action_msg &amp;quot;NOT Restaring as you wish&amp;quot;
        fi
        ;;
  stop)
    if [ -f ${PIDFILESTART} ]; then
            rm ${PIDFILESTART}
        touch ${PIDFILESTOP}
        log_action_msg &amp;quot;Terminating restart script&amp;quot;

    fi
    log_action_msg &amp;quot;Terminated restart script&amp;quot;

    exit 0
        ;;
  *)
        echo &amp;quot;Usage: $0 start|stop&amp;quot; &amp;gt;&amp;amp;2
        exit 3
        ;;
esac
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Session</title>
      <link>http://www.robotamer.com/code/go/gotamer/session.html</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/code/go/gotamer/session.html</guid>
      <description>&lt;p&gt;Feutures:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Custom backends to store session data locally.&lt;/li&gt;
&lt;li&gt;Flash messages: session values that last until read.&lt;/li&gt;
&lt;li&gt;Low dependency and therefore versitile, for example, it does not depened on the go http pkg&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Built-in backends to store sessions locally:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;storeMap ⬄ A in memory map[string]sessions store&lt;/li&gt;
&lt;li&gt;storeLeveldb ⬄ Stores session data in a leveldb&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simple Sample code the uses the default storeMap backend:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package main

import(
    &amp;quot;bitbucket.org/gotamer/net/session&amp;quot;
    &amp;quot;fmt&amp;quot;
)

func main(){
    id := save()
    load(id)
}

func save() string {
    sess := session.New()
    sess.Set(&amp;quot;Alias&amp;quot;,&amp;quot;GoTamer&amp;quot;)
    err := sess.Save()
    Check(err)
    fmt.Println(&amp;quot;Session Saved&amp;quot;, sess)
    sid, err := sess.Id()
    Check(err)
    return sid
}

func load(sid string){
    sess, err := session.Load(sid)
    Check(err)
    fmt.Println(&amp;quot;Session Load: &amp;quot;, sess)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sample code the uses the leveldb backend:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;package main

import(
    &amp;quot;bitbucket.org/gotamer/net/session&amp;quot;
    &amp;quot;fmt&amp;quot;
)

var path = &amp;quot;/tmp/sessions&amp;quot;

func init(){
    session.StoreLeveldb(path)  
}

func main(){
    id := save()
    load(id)
}

func save() string {
    sess := session.New()
    sess.Set(&amp;quot;Alias&amp;quot;,&amp;quot;GoTamer&amp;quot;)
    err := sess.Save()
    Check(err)
    fmt.Println(&amp;quot;Session Saved&amp;quot;, sess)
    sid, err := sess.Id()
    Check(err)
    return sid
}

func load(sid string){
    sess, err := session.Load(sid)
    Check(err)
    fmt.Println(&amp;quot;Session Load: &amp;quot;, sess)
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additional backends can be created by simply implementing following interfaces:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;type Store interface {
    Save(session *sessionObject) (err error)
    Load(sid string) (session *sessionObject, err error)
    Delete(sid string) (err error)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some code has been borrowed from &lt;a href=&#34;http://www.stathat.com/src/bingo&#34;&gt;http://www.stathat.com/src/bingo&lt;/a&gt; witch is licensed also under MIT.&lt;/p&gt;

&lt;p&gt;Code is available at &lt;a href=&#34;https://bitbucket.org/gotamer&#34;&gt;https://bitbucket.org/gotamer&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Your Everyday Go Tools</title>
      <link>http://www.robotamer.com/code/go/gotamer/tools.html</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/code/go/gotamer/tools.html</guid>
      <description>&lt;p&gt;Generates a random number between min and max&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func IRand(min, max int) int
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Generates a random strings between min and max&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func SRand(min, max int, readable bool) string
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Reverses the string&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func Reverse(s string) strings
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Shuffles the string&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func Shuffle(s string) string
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://go.pkgdoc.org/bitbucket.org/gotamer/tools&#34; title=&#34;Documentation&#34;&gt;Pkg Documantation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bitbucket.org/gotamer/tools&#34; title=&#34;Repository&#34;&gt;Repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
