<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Code on RoboTamer </title>
    <link>http://www.robotamer.com/tags/code.xml</link>
    <language>en-us</language>
    <author>Dennis T Kaplan</author>
    <rights>Copyright (c) 2008 - 2013, Dennis T Kaplan; all rights reserved.</rights>
    <updated>2013-12-01 00:00:00 &#43;0000 UTC</updated>
    
    <item>
      <title>﻿Hugo, a static website generator</title>
      <link>http://www.robotamer.com/blog/hugo.html</link>
      <pubDate>Sun, 01 Dec 2013 00:00:00 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/blog/hugo.html</guid>
      <description>&lt;p&gt;Just a couple of days ago I posted about jkl, a static website generator written in Go, and based on Jekyll.&lt;/p&gt;

&lt;p&gt;While setting up jkl, I stumbled over Hugo! I was impressed at first site with Hugo.
Since then I have reconfigured my site to work with Hugo.
I didn&amp;rsquo;t have to fiddle with the Hugo code, everything just works, and it really does most everything that comes to mind.
This whole website thing has been bothering me for a long time; and finally I am a happy camper.&lt;/p&gt;

&lt;p&gt;There are a few thinks I still have to setup, like the indexes are done but the links don&amp;rsquo;t seam to work as expected, or I am doing something wrong. However this is minor considering that I am glad that Hugo even has a link and menu generating system.&lt;/p&gt;

&lt;p&gt;Also the rss feeds needs some work, but again Hugo has that build in, I just have to set it up right.&lt;/p&gt;

&lt;p&gt;Hugo&amp;rsquo;s front matter can be defined with YAML, TOML, or JSON. Which one you like is up to you, you can even use a
different one on each page.
Here is the TOML for this page:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
linktitle = &amp;quot;Huge&amp;quot;
title = &amp;quot;﻿Hugo, a static website generator&amp;quot;
description = &amp;quot;Hugo is a static website generator written in the Go programing language&amp;quot;
keywords = [&amp;quot;code&amp;quot;,&amp;quot;go&amp;quot;, &amp;quot;golang&amp;quot;, &amp;quot;website&amp;quot;,&amp;quot;static&amp;quot;,&amp;quot;generator&amp;quot;]
tags = [&amp;quot;code&amp;quot;,&amp;quot;go&amp;quot;,&amp;quot;website&amp;quot;]
groups = [&amp;quot;blog&amp;quot;]
language = &amp;quot;en&amp;quot;
date = &amp;quot;2013-12-01&amp;quot;
+++
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;In short, I can highlly recommend &lt;a href=&#34;http://github.com/spf13/hugo&#34;&gt;Hugo&lt;/a&gt; to any coder!&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Need PHP 5.3 Hosting Recommendations – Who Hosts Yours?</title>
      <link>http://www.robotamer.com/blog/2011-06-27-need-hosting-recommendations-who-hosts-yours.html</link>
      <pubDate>Mon, 27 Jun 2011 23:38:12 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/blog/2011-06-27-need-hosting-recommendations-who-hosts-yours.html</guid>
      <description>&lt;p&gt;I have been looking for a host that offers php 5.3 hosting, however all those hosting compare sites don&amp;rsquo;t seam to be quite as honest as one would expect. I would also need ssh access, so if you have a recommendation you could share with me, I would appreciate it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Multiple PHP installations</title>
      <link>http://www.robotamer.com/code/php/2011-06-20-multiple-php-installations-so-you-can-run-5-3-x-on-one-box.html</link>
      <pubDate>Mon, 20 Jun 2011 11:58:00 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/code/php/2011-06-20-multiple-php-installations-so-you-can-run-5-3-x-on-one-box.html</guid>
      <description>&lt;p&gt;How to install &lt;strong&gt;PHP 5.3.X&lt;/strong&gt; as secondary php version from source&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PHPV=5.3.6
cd /usr/local/src
wget http://us.php.net/get/php-$PHPV.tar.gz/from/this/mirror
mv mirror php-$PHPV.tar.gz
tar xzvf php-$PHPV.tar.gz
chown -R $USER:$USER php-$PHPV/
cd php-$PHPV/

apt-get install libxml2-dev libssl-dev libcurl4-gnutls-dev libjpeg62-dev libpng12-dev libfreetype6-dev unixodbc-dev

./configure 
  --prefix=/usr/local/php5.3 
  --with-config-file-path=/usr/local/etc/php5.3 
  --with-config-file-scan-dir=/usr/local/etc/php5.3/$SAPIconf.d 
  --with-libdir=/lib 
  --disable-cgi 
  --with-libxml-dir=/usr/ 
  --with-mysql=/usr/ 
  --enable-pdo 
  --with-pdo-mysql 
  --with-mysqli 
  --with-zlib-dir=/usr 
  --with-curl 
  --with-gd 
  --with-jpeg-dir=/usr/lib 
  --with-png-dir=/usr/lib 
  --with-freetype-dir=/usr/lib 
  --with-gettext 
  --enable-mbstring 
  --enable-soap 
  --enable-ftp 
  --enable-fpm 
  --with-openssl

make
make test
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More help in case you have errors:
&lt;a href=&#34;http://www.robo47.net/text/6-PHP-Configure-und-Compile-Fehler&#34;&gt;PHP-Configure-und-Compile-Fehler&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>fixing php&#39;s gettype function</title>
      <link>http://www.robotamer.com/blog/2011-06-17-fixing-phps-gettype-function.html</link>
      <pubDate>Fri, 17 Jun 2011 10:10:09 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/blog/2011-06-17-fixing-phps-gettype-function.html</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php    

public static function getType($value, $max_length = 50){

    $type = gettype($value);

    if($type == &#39;NULL&#39;
            || $type == &#39;boolean&#39;
            || $type == &#39;integer&#39;
            || $type == &#39;double&#39;
            || $type == &#39;object&#39;
            || $type == &#39;resource&#39;
            || $type == &#39;array&#39;
        )
        return array(&#39;type&#39;=&amp;gt;$type,&#39;value&#39;=&amp;gt;$value);

    if($type == &#39;string&#39; &amp;amp;&amp;amp; empty($value))
        return array(&#39;type&#39;=&amp;gt;&#39;NULL&#39;,&#39;value&#39;=&amp;gt;$value);

    if($type == &#39;string&#39; &amp;amp;&amp;amp; strlen($value) &amp;gt; $max_length)
        return array(&#39;type&#39;=&amp;gt;&#39;blob&#39;,&#39;value&#39;=&amp;gt;$value);

    if($type == &#39;string&#39; &amp;amp;&amp;amp; substr($value, 0,1) === &#39;0&#39;)
        return array(&#39;type&#39;=&amp;gt;&#39;string&#39;,&#39;value&#39;=&amp;gt;$value);

    if($type == &#39;string&#39; &amp;amp;&amp;amp; is_numeric($value)){
        $int   = (int) $value;
        $float = (float) $value;

        if($int == $value){
            $value = $int;
            $type = &#39;integer&#39;;
        }elseif($float == $value){
            $value = $float;
            $type = &#39;double&#39;;
        }
    }elseif($type == &#39;string&#39;){
        $type = &#39;string&#39;;
    }else{
        $type = &#39;blob&#39;;
    }
    return array(&#39;type&#39;=&amp;gt;$type,&#39;value&#39;=&amp;gt;$value);
}
    
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>num_row with PDO</title>
      <link>http://www.robotamer.com/blog/2011-06-10-num_row-with-pdo.html</link>
      <pubDate>Fri, 10 Jun 2011 06:33:51 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/blog/2011-06-10-num_row-with-pdo.html</guid>
      <description>&lt;p&gt;There is no num_row() function for PHP PDO&lt;/p&gt;

&lt;p&gt;Here are my two solutions:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One with prepare &amp;amp; execute&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db-&amp;gt;prepare($sql);
$sth-&amp;gt;execute(array($key));
$rows = $sth-&amp;gt;fetch(PDO::FETCH_NUM);
echo $rows[0];
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;One with query:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db-&amp;gt;query($sql);
$row = $result-&amp;gt;fetch(PDO::FETCH_NUM);
echo $row[0];
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Load functions and array&#39;s</title>
      <link>http://www.robotamer.com/blog/2011-06-03-load-functions-and-arrays.html</link>
      <pubDate>Fri, 03 Jun 2011 07:50:58 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/blog/2011-06-03-load-functions-and-arrays.html</guid>
      <description>&lt;p&gt;This class is used to load functions and array&amp;rsquo;s. It also can copy functions and array&amp;rsquo;s to the linux memory drive and load them from there to speed thinks up.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php if(!defined(&#39;DROOT&#39;)) trigger_error(&amp;quot;Please define data location (DROOT)&amp;quot;);

/**
 *
 * This class loads stuff
 *
 * 1) Functions
 * 2) Array&#39;s
 *
 * @todo        Load array&#39;s
 * @category    Data
 * @package     TaMeR
 * @copyright   Copyright (c) 2010 - 2011 Dennis T Kaplan
 * @license     http://www.gnu.org/licenses/gpl.txt
 * @author      Dennis T Kaplan
 **/
class Load
{
    protected $type;
    protected $path;

    public function __construct(){}
    public function __destruct(){}

    public static function a($array_name) {
        if( ! is_string($array_name)){
            trigger_error(&amp;quot;Array name must be a string!&amp;quot;.BR, E_USER_WARNING);
            exit;
        }
        if(isset($$array_name) &amp;amp;&amp;amp; is_array($$array_name))
            return $$array_name;

        $dfile = DROOT.&#39;array/&#39;.$array_name.&#39;.php&#39;;
        $mfile = FALSE;
        if( defined(&#39;MROOT&#39;) &amp;amp;&amp;amp; MROOT != FALSE)
            $mfile = MROOT.&#39;array/&#39;.$array_name.&#39;.php&#39;;
        return self::inc($dfile,$mfile,$array_name);
    }

    public function aSave($var)
    {
        $array_name = array_search($var, $GLOBALS);

        $dfile = DROOT.&#39;array/&#39;.$array_name.&#39;.php&#39;;

        $string = var_export($var,true);
        file_put_contents($dfile,
            &#39;&#39;);

        $mfile = FALSE;
        if( defined(&#39;MROOT&#39;) &amp;amp;&amp;amp; MROOT !== FALSE){
            $mfile = MROOT.&#39;array/&#39;.$array_name.&#39;.php&#39;;
            file_put_contents($mfile, self::stripComments($dfile));
        }

    }//end save()

    public static function f($str) {
        if( ! is_string($str))
            trigger_error(&amp;quot;Argument for load must be string!&amp;quot;, E_USER_WARNING);

        $array = self::prepArgs($str);
        $mfile = FALSE;
        foreach($array as $func_name){
            if ( function_exists($func_name)) continue;
            $dfile = FROOT.$func_name.&#39;.php&#39;;
            if( defined(&#39;MROOT&#39;) &amp;amp;&amp;amp; MROOT != FALSE)
                $mfile = MROOT.&#39;func/&#39;.$func_name.&#39;.php&#39;;
            self::inc($dfile,$mfile);
        }
    }

    /**
     * Description load function
     * if availabe load from memory folder; else
     *  if a memory folder is availabe, copy to memory then load; else
     *   load from file
     *
     * @package     TaMeR
     * @category    File
     * @author      Dennis T Kaplan
     * @copyright  (C) 2009-2011 Dennis T Kaplan
     *
     * @param  string $dfile Disk File
     * @param  string $mfile Memory File
     * @param  string $array
     * @return mixed
     */
    protected static function inc($dfile,$mfile = FALSE,$array = FALSE)
    {
        if($mfile !== FALSE){
            if(file_exists($mfile)){
                 include $mfile;
            }elseif(self::hasMRoot()){
                file_put_contents($mfile, self::stripComments($dfile));
                chmod($mfile, 00644);
                include $mfile;
            }else{
                // Fail Safe
                include $dfile;
            }
        }else{
            include $dfile;
        }
        if($array !== FALSE) return $$array;
    }

    /**
     * Name stripComments
     *
     * Description Strip php comments from php file
     *
     * @package     TaMeR
     * @category    File
     * @type        Function
     * @author      Ionuț G. Stan
     *
     * @param  string $file
     * @param  mixed  $file_desc &#39;/var/www/somefile.php&#39;
     * @return string
     */
    public static function stripComments($file) {
        $fileStr = file_get_contents($file);
        $newStr  = &#39;&#39;;

        $commentTokens = array(T_COMMENT);

        if (defined(&#39;T_DOC_COMMENT&#39;))
            $commentTokens[] = T_DOC_COMMENT; // PHP 5
        if (defined(&#39;T_ML_COMMENT&#39;))
            $commentTokens[] = T_ML_COMMENT;  // PHP 4

        $tokens = token_get_all($fileStr);

        foreach ($tokens as $token) {
            if (is_array($token)) {
                if (in_array($token[0], $commentTokens))
                        continue;

                $token = $token[1];
            }

            $newStr .= $token;
        }
        /**
         * Replace all s t n with one space and trim
         * @todo replave with preg_replace()
         */ 
        $newStr = trim(preg_replace(&#39;/s+/&#39;, &#39; &#39;, $newStr));
        $newStr = str_replace(&#39;, &#39;,&#39;,&#39;,$newStr);
        $newStr = str_replace(&#39; =&amp;gt; &#39;,&#39;=&amp;gt;&#39;,$newStr);
        $newStr = str_replace(&#39; (&#39;,&#39;(&#39;,$newStr);
        $newStr = str_replace(&#39;( &#39;,&#39;(&#39;,$newStr);
        $newStr = str_replace(&#39;) &#39;,&#39;)&#39;,$newStr);
        $newStr = str_replace(&#39; )&#39;,&#39;)&#39;,$newStr);
        $newStr = str_replace(&#39; = &#39;,&#39;=&#39;,$newStr);
        $newStr = str_replace(&#39; }&#39;,&#39;}&#39;,$newStr);
        $newStr = str_replace(&#39;{ &#39;,&#39;{&#39;,$newStr);
        return $newStr;
    }

    public static function prepArgs($args) {
        $args = preg_replace(&#39;/ss+/&#39;, &#39; &#39;, trim($args));
        return explode(&#39; &#39;,$args);
    }

    protected static function hasMRoot() {
    /**
     * Checks if the memory directory is available on the file system
     * and creates the directory structure if the memory folder is
     * available but the directory structure has not been created.
     */
        if( defined(&#39;MROOT&#39;) &amp;amp;&amp;amp; MROOT != FALSE){
            if(file_exists(MROOT)){
                return TRUE;
            }else{
                mkdir(MROOT, 0777);
                mkdir(MROOT.&#39;class&#39;,  0777);
                mkdir(MROOT.&#39;func&#39; ,  0777);
                mkdir(MROOT.&#39;array&#39;,  0777);
                return TRUE;
            }
        }else{
            return FALSE;
        }
    }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>e() for echo</title>
      <link>http://www.robotamer.com/blog/2011-06-01-echo.html</link>
      <pubDate>Wed, 01 Jun 2011 02:01:27 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/blog/2011-06-01-echo.html</guid>
      <description>&lt;p&gt;It&amp;rsquo;s really annoying having to thing of html stuff like pre &amp;amp; br everytime you need to display something.&lt;/p&gt;

&lt;p&gt;And it&amp;rsquo;s even worst if you like me test your code in cli and cgi.&lt;/p&gt;

&lt;p&gt;So I wrote this little method to take care of it all. It&amp;rsquo;s nothing complicated but sure useful.&lt;/p&gt;

&lt;p&gt;It detects cgi and cli, and formats everything accordingly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;    
&amp;lt;?php
/**
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see http://www.gnu.org/licenses/
**/

/**
 * e() --- Prints human-readable information about a variable
 *
 * string e ( mixed $expression[, string $name [, bool $return = false ]] )
 *
 * Replacement for php echo, print, print_r(), var_export() etc
 */

/**
 * @category    TaMeR
 * @copyright   Copyright (c) 2008 - 2011 Dennis T Kaplan
 * @license     http://www.gnu.org/licenses/gpl.txt
 * @link        http://github.com/pzzazz/TaMeR
 * @author      Dennis T Kaplan
 * @date        May 1, 2011
 * @version     1.0
 * @access      public
 * @param       mixed   $var
 * @param       string  $name
 * @param       boolean $return
 * @return      string
 **/
function e($var, $name = FALSE, $return = FALSE) {
    $preO = $preC = &#39;&#39;; $br = PHP_EOL;
    if( ! isset($_SERVER[&#39;argv&#39;])){
        $preO = &#39;

&#39;; $preC = &#39;&#39;;
        $h1O = &#39;&amp;lt;h1&amp;gt;&#39;;   $h1C = &#39;&amp;lt;/h1&amp;gt;&#39;;
        $br = &#39;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&#39;.PHP_EOL;
    }
    if(!is_array($var) &amp;amp;&amp;amp; !is_object($var))
    {
        if ($name !== FALSE) echo $br.$name.&#39;: &#39;;
        echo (isset($_SERVER[&#39;argv&#39;]))
                  ? $var.$br
                  : htmlspecialchars($var).$br;
    }else{
        if($return === FALSE) {
            if ($name !== FALSE) echo $br.$h1O.$name.&#39;: &#39;.$h1C;
            echo $preO.print_r($var, TRUE).$preC.$br;
        }else{
            if ($name !== FALSE){
                return &#39;&#39;;
            }else{
                return $br.$preO.var_export($var, TRUE).$preC.$br;
            }
        }
    }
}
?&amp;gt;
    
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Creating models for the Zend Framework from command line via phpcli.</title>
      <link>http://www.robotamer.com/blog/2010-03-18-7.html</link>
      <pubDate>Thu, 18 Mar 2010 20:20:00 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/blog/2010-03-18-7.html</guid>
      <description>&lt;p&gt;Creating models for the Zend Framework from command line via phpcli.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php zend/model.php -h&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is a command line PHP script.&lt;/p&gt;

&lt;p&gt;Set table&lt;/p&gt;

&lt;p&gt;Options:
    -path=[ ]
    -table=[ ]&lt;/p&gt;

&lt;p&gt;Usage:
php zend/model.php -arg=value&lt;/p&gt;

&lt;p&gt;&lt;code&gt;~/phpcli$ php zend/model.php -path=/var/www/TaMeR/data/tmp.db3 -table=users&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Sample Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Database Structure:
    CREATE TABLE users (
    Alias TEXT UNIQUE,
    Password TEXT,
    eMail TEXT,
    Avatar TEXT,
    Timezone TEXT,
    IP TEXT,
    count INTEGER,
    cookie TEXT,
    vars TEXT,
    status INTEGER DEFAULT 1,
    added date,
    updated datetime,
    PRIMARY KEY(Alias)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/phpcli$ php zend/model.php -path=/var/www/TaMeR/data/tmp.db3 -table=user
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-
    class _Model_users
    {
    protected $_Alias;
    protected $_Password;
    protected $_eMail;
    protected $_Avatar;
    protected $_Timezone;
    protected $_IP;
    protected $_count;
    protected $_cookie;
    protected $_vars;
    protected $_status;
    protected $_added;
    protected $_updated;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function setAlias($Alias){
    $this-&amp;gt;_Alias = (string) $Alias;
    return $this;
}

public function getAlias($Alias){
    return $this-&amp;gt;_Alias;
}

public function setPassword($Password){
    $this-&amp;gt;_Password = (string) $Password;
    return $this;
}

public function getPassword($Password){
    return $this-&amp;gt;_Password;
}

public function seteMail($eMail){
    $this-&amp;gt;_eMail = (string) $eMail;
    return $this;
}

public function geteMail($eMail){
    return $this-&amp;gt;_eMail;
}

public function setAvatar($Avatar){
    $this-&amp;gt;_Avatar = (string) $Avatar;
    return $this;
}

public function getAvatar($Avatar){
    return $this-&amp;gt;_Avatar;
}

public function setTimezone($Timezone){
    $this-&amp;gt;_Timezone = (string) $Timezone;
    return $this;
}

public function getTimezone($Timezone){
    return $this-&amp;gt;_Timezone;
}

public function setIP($IP){
    $this-&amp;gt;_IP = (string) $IP;
    return $this;
}

public function getIP($IP){
    return $this-&amp;gt;_IP;
}

public function setcount($count){
    $this-&amp;gt;_count = (int) $count;
    return $this;
}

public function getcount($count){
    return $this-&amp;gt;_count;
}

public function setcookie($cookie){
    $this-&amp;gt;_cookie = (string) $cookie;
    return $this;
}

public function getcookie($cookie){
    return $this-&amp;gt;_cookie;
}

public function setvars($vars){
    $this-&amp;gt;_vars = (string) $vars;
    return $this;
}

public function getvars($vars){
    return $this-&amp;gt;_vars;
}

public function setstatus($status){
    $this-&amp;gt;_status = (int) $status;
    return $this;
}

public function getstatus($status){
    return $this-&amp;gt;_status;
}

public function setadded($added){
    $this-&amp;gt;_added = (string) $added;
    return $this;
}

public function getadded($added){
    return $this-&amp;gt;_added;
}

public function setupdated($updated){
    $this-&amp;gt;_updated = (string) $updated;
    return $this;
}

public function getupdated($updated){
    return $this-&amp;gt;_updated;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Zend ACL</title>
      <link>http://www.robotamer.com/blog/2008-04-27-21.html</link>
      <pubDate>Sun, 27 Apr 2008 19:50:00 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/blog/2008-04-27-21.html</guid>
      <description>&lt;p&gt;Tamer_ACL is a simple Zend Framework ACL plugin that uses the sqlite backend to store all the data.&lt;/p&gt;

&lt;h4&gt;How To Inatall&lt;/h4&gt;

&lt;p&gt;Make sure you have a table called &lt;strong&gt;role&lt;/strong&gt; in your authentication table and a table called &lt;strong&gt;alias&lt;/strong&gt; you may change that to username if you like. The sql code is below.&lt;br /&gt;
Below are the files.&lt;br /&gt;
Before each file you will find installation instructions that should work even for the most novice Linux / Zend Framework developer.&lt;/p&gt;

&lt;h4&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.phpclasses.org/browse/package/4100.html&#34;&gt;phpclasses.org&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/tamer&#34;&gt;Google code / REPO&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Todo&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Admin Backend&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4&gt;ZEND_ROOT/backstrap.php&lt;/h4&gt;

&lt;p&gt;Create acl object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;include_once &amp;quot;Tamer/Acl.php&amp;quot;;
$acl = new Tamer_Acl();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the Tamer_Plugin_Auth to the Zend Front Controller&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;$front-&amp;gt;setControllerDirectory(APPS . &#39;/default/controllers&#39;)
        -&amp;gt;setBaseUrl($cfg-&amp;gt;baseUrl)
        -&amp;gt;registerPlugin(new Tamer_Plugin_Auth($auth, $acl))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;ZEND_ROOT/library/Tamer/Acl.php&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;
&amp;lt;?php
require_once &#39;Zend/Acl.php&#39;;
require_once &#39;Zend/Acl/Role.php&#39;;
require_once &#39;Zend/Acl/Resource.php&#39;;
require_once &#39;Zend/Db/Adapter/Pdo/Sqlite.php&#39;;

class Tamer_ACL extends Zend_ACL 
{
        public $alias;
        public $role;
        
        public function __construct($alias, $role)
        {       
                $this-&amp;gt;alias = $alias;
                $this-&amp;gt;role = $role;
                $sqlite = new TamerLiteACL($alias, $role);
                $result = $sqlite-&amp;gt;getAclRows();
                foreach($result[&#39;roles&#39;] as $v){
                        $this-&amp;gt;addRoles($v);
                }
                $this-&amp;gt;addResources($result[&#39;resources&#39;]);
                $this-&amp;gt;addAccess($result[&#39;access&#39;]);
        }
        
        private function addRoles($rows)
        {
                foreach($rows as $v){
                        if($v[&#39;parent&#39;] == &#39;&#39;){
                                $this-&amp;gt;addRole(new Zend_Acl_Role($v[&#39;role&#39;]));
                        }else{
                                $this-&amp;gt;addRole(new Zend_Acl_Role($v[&#39;role&#39;]), $v[&#39;parent&#39;]);
                        }
                }
        }
        
        private function addResources($rows)
        {
                foreach($rows as $v){
                        if($v[&#39;parent&#39;] == &#39;&#39;){
                                $this-&amp;gt;add(new Zend_Acl_Resource($v[&#39;resource&#39;]));
                        }else{
                                $this-&amp;gt;add(new Zend_Acl_Resource($v[&#39;resource&#39;]), $v[&#39;parent&#39;]);
                        }
                }
        }

        private function addAccess($rows)
        {
                foreach($rows as $v){
                        if($v[&#39;allow&#39;] == 1){
                                $this-&amp;gt;allow($v[&#39;role&#39;], $v[&#39;resource&#39;], $v[&#39;privilege&#39;]);
                        }else{
                                $this-&amp;gt;deny($v[&#39;role&#39;], $v[&#39;resource&#39;], $v[&#39;privilege&#39;]);
                        }
                }
        }
}


class TamerLiteACL 
{
        private $_sqlite_name = &#39;/db/config.db&#39;;
        private $_alias;
        private $_role;
        private $_result;
        
        public function __construct($alias, $role)
        {       
                $this-&amp;gt;_alias = $alias;
                $this-&amp;gt;_role = $role;
                
                try{
                        $this-&amp;gt;_sqliteAdapter = new Zend_Db_Adapter_Pdo_Sqlite(array(&#39;dbname&#39; =&amp;gt; ROOT.$this-&amp;gt;_sqlite_name));
                        $this-&amp;gt;_sqliteAdapter-&amp;gt;getConnection();
                } catch (Zend_Db_Adapter_Exception $e) {
                        echo &#39;adapter&amp;lt;pre&amp;gt;&#39;.$e-&amp;gt;getMessage().&#39;&amp;lt;/pre&amp;gt;&#39;;
                } catch (Zend_Exception $e) {
                        echo &#39;adapter&amp;lt;pre&amp;gt;&#39;.$e-&amp;gt;getMessage().&#39;&amp;lt;/pre&amp;gt;&#39;;
                }
                $this-&amp;gt;_sqliteAdapter-&amp;gt;getProfiler()-&amp;gt;setEnabled(true);

                $select = $this-&amp;gt;_sqliteAdapter-&amp;gt;select()
                                        -&amp;gt;from(&#39;acl_roles&#39;, array(&#39;role&#39;, &#39;parent&#39;))
                                        -&amp;gt;where(&#39;type = ?&#39;, 1);
                
                $stmt = $this-&amp;gt;_sqliteAdapter-&amp;gt;query($select);
                $this-&amp;gt;_result[&#39;roles&#39;][&#39;system&#39;] = $stmt-&amp;gt;fetchAll();
                
                $select = $this-&amp;gt;_sqliteAdapter-&amp;gt;select()
                                        -&amp;gt;from(&#39;acl_roles&#39;, array(&#39;role&#39;, &#39;parent&#39;))
                                        -&amp;gt;where(&#39;role = ?&#39;, $this-&amp;gt;_alias)
                                        -&amp;gt;orwhere(&#39;parent = ?&#39;, $this-&amp;gt;_alias);
                
                $stmt = $this-&amp;gt;_sqliteAdapter-&amp;gt;query($select);
                $this-&amp;gt;_result[&#39;roles&#39;][&#39;alias&#39;] = $stmt-&amp;gt;fetchAll();
                
                $stmt = $this-&amp;gt;_sqliteAdapter-&amp;gt;query(
                &amp;quot;SELECT resource, parent FROM acl_resources WHERE owner = &#39;system&#39; OR owner = ?&amp;quot;, $this-&amp;gt;_alias);
                $this-&amp;gt;_result[&#39;resources&#39;] = $rows = $stmt-&amp;gt;fetchAll();
                
                $stmt = $this-&amp;gt;_sqliteAdapter-&amp;gt;query(&#39;SELECT allow, role, resource, privilege FROM acl_access WHERE type = 1 ORDER BY chain&#39;);
                $this-&amp;gt;_result[&#39;access&#39;] = $rows = $stmt-&amp;gt;fetchAll();

                $this-&amp;gt;_sqliteAdapter-&amp;gt;closeConnection();
        }
        
        public function getAclRows()
        {
                return $this-&amp;gt;_result;
        }
}




class aclCreate extends Zend_ACL 
{
        public function __construct()
        {
                $this-&amp;gt;add(new Zend_Acl_Resource(&#39;index&#39;));
                $this-&amp;gt;add(new Zend_Acl_Resource(&#39;safe&#39;));
                $this-&amp;gt;add(new Zend_Acl_Resource(&#39;login&#39;), &#39;safe&#39;);
                $this-&amp;gt;add(new Zend_Acl_Resource(&#39;registration&#39;), &#39;safe&#39;);
                $this-&amp;gt;add(new Zend_Acl_Resource(&#39;password&#39;), &#39;safe&#39;);
                
                $this-&amp;gt;addRole(new Zend_Acl_Role(&#39;guest&#39;));
                $this-&amp;gt;deny(&#39;guest&#39;, &#39;safe&#39;, NULL);
                $this-&amp;gt;allow(&#39;guest&#39;, &#39;registration&#39;);
                $this-&amp;gt;allow(&#39;guest&#39;, &#39;login&#39;);
                $this-&amp;gt;deny(&#39;guest&#39;, &#39;password&#39;);
                $this-&amp;gt;allow(&#39;guest&#39;,&#39;index&#39;);
                
                $this-&amp;gt;addRole(new Zend_Acl_Role(&#39;member&#39;));
                $this-&amp;gt;allow(&#39;member&#39;, &#39;safe&#39;, NULL);
                
                $this-&amp;gt;addRole(new Zend_Acl_Role(&#39;admin&#39;));
                $this-&amp;gt;allow(&#39;admin&#39;);
        }

}

class TamerFile_ACL
{
        /*
        @ Call like this from bootstrap
                include_once &amp;quot;Tamer/Acl.php&amp;quot;;
                $acl = new Tamer_Acl();
                $acl = new aclCreate();
                $acl = $acl-&amp;gt;aclCheck();
        */
        protected $aclCfg;
        
        private $_sqlite_name = &#39;/db/config.db&#39;;
        private $_sqliteAdapter;
        private $_table; //Sqlite Table
        
        public $old = FALSE;

        public function __construct()
        {
                $this-&amp;gt;aclCfg = ROOT.&#39;/library/Tamer/Acl.php&#39;;

                try{
                        $this-&amp;gt;_sqliteAdapter = new Zend_Db_Adapter_Pdo_Sqlite(array(&#39;dbname&#39; =&amp;gt; ROOT.$this-&amp;gt;_sqlite_name));
                        $this-&amp;gt;_sqliteAdapter-&amp;gt;getConnection();
                } catch (Zend_Db_Adapter_Exception $e) {
                        echo &#39;adapter&amp;lt;pre&amp;gt;&#39;.$e-&amp;gt;getMessage().&#39;&amp;lt;/pre&amp;gt;&#39;;
                } catch (Zend_Exception $e) {
                        echo &#39;adapter&amp;lt;pre&amp;gt;&#39;.$e-&amp;gt;getMessage().&#39;&amp;lt;/pre&amp;gt;&#39;;
                }
                //$this-&amp;gt;dropTable();
                //$this-&amp;gt;makeTable();
                //$this-&amp;gt;aclCheck();
        }
        
        public function aclCheck()
        {
                $ftime = filemtime($this-&amp;gt;aclCfg);
                $sql = &#39;SELECT time FROM acl_array WHERE time = ?&#39;;
                if($this-&amp;gt;_result = $this-&amp;gt;_sqliteAdapter-&amp;gt;fetchRow($sql, $ftime)){     
                        return  $this-&amp;gt;aclGet();
                }else{
                        $acl = new aclCreate();
                        $this-&amp;gt;aclDelete();
                        $this-&amp;gt;aclSave($acl);
                        return $acl;
                }
        }

        public function aclGet()
        {
                $sql = &#39;SELECT acl FROM acl_array WHERE time = ?&#39;;
                $ftime = filemtime($this-&amp;gt;aclCfg);
                $this-&amp;gt;_result = $this-&amp;gt;_sqliteAdapter-&amp;gt;fetchRow($sql, $ftime);
                $this-&amp;gt;_sqliteAdapter-&amp;gt;closeConnection();
                
                return unserialize($this-&amp;gt;_result[&#39;acl&#39;]);
        }
        
        public function aclSave($array)
        {
                $filemtime = filemtime($this-&amp;gt;aclCfg);
                $array = serialize($array);
                $data = array(&#39;time&#39;=&amp;gt;$filemtime,&#39;acl&#39;=&amp;gt;$array);
                $this-&amp;gt;_sqliteAdapter-&amp;gt;insert(&#39;acl_array&#39;, $data);
                $this-&amp;gt;_sqliteAdapter-&amp;gt;closeConnection();
        }

        public function aclDelete()
        {
                $this-&amp;gt;_sqliteAdapter-&amp;gt;delete(&#39;acl_array&#39;);
                $this-&amp;gt;_sqliteAdapter-&amp;gt;closeConnection();
        }

        
        /**
         * creates the db table
         *
         * @param array $fields
         */
        public function dropTable()
        {
            $this-&amp;gt;_result = $this-&amp;gt;_sqliteAdapter-&amp;gt;getConnection()-&amp;gt;exec(&#39;DROP TABLE acl_array&#39;);
                $this-&amp;gt;_sqliteAdapter-&amp;gt;closeConnection();
        }
        
        /**
         * creates the db table
         *
         * @param array $fields
         */
        public function makeTable()
        {
                $sql[] = &#39;CREATE TABLE IF NOT EXISTS acl_roles (role TEXT(50) NOT NULL,parent TEXT(50) default NULL)&#39;;
                $sql[] = &#39;CREATE TABLE IF NOT EXISTS acl_resources (resource TEXT(50) NOT NULL,parent TEXT(50) default NULL)&#39;;
                $sql[] = &#39;CREATE TABLE IF NOT EXISTS acl_access (role TEXT(50) NOT NULL,resource  Text(50) NOT NULL,privilege Text(50),allow Boolean NOT NULL DEFAULT 0)&#39;;
                $sql[] = &#39;CREATE table IF NOT EXISTS acl_array(time INTEGER PRIMARY KEY, acl TEXT)&#39;;
                foreach($sql as $v){
                        $this-&amp;gt;_sqliteAdapter-&amp;gt;query($v);
                }
                $this-&amp;gt;_table = true;
                $this-&amp;gt;_sqliteAdapter-&amp;gt;closeConnection();
        }       
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;ZEND_ROOT/library/Tamer/Plugin/Auth.php&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php

class Tamer_Plugin_Auth extends Zend_Controller_Plugin_Abstract
{
        private $_auth;
        private $_acl;
        
        private $_noauth = array(&#39;module&#39; =&amp;gt; &#39;safe&#39;,
                                                        &#39;controller&#39; =&amp;gt; &#39;login&#39;,
                                                        &#39;action&#39; =&amp;gt; &#39;index&#39;);
        
        private $_noacl = array(&#39;module&#39; =&amp;gt; &#39;default&#39;,
                                                        &#39;controller&#39; =&amp;gt; &#39;error&#39;,
                                                        &#39;action&#39; =&amp;gt; &#39;privileges&#39;);
        
        public function __construct($auth, $acl)
        {
                $this-&amp;gt;_auth = $auth;
                $this-&amp;gt;_acl = $acl;
        }
        
        public function preDispatch(Zend_Controller_Request_Abstract $request)
        {
                if ($this-&amp;gt;_auth-&amp;gt;hasIdentity()) {
                        $role = $this-&amp;gt;_auth-&amp;gt;getIdentity()-&amp;gt;role;
                } else {
                        $role = &#39;guest&#39;;
                }

                $controller = $request-&amp;gt;controller;
                $action         = $request-&amp;gt;action;
                $module         = $request-&amp;gt;module;
                $resource       = $controller;
                
                if (!$this-&amp;gt;_acl-&amp;gt;has($resource)) {
                        $resource = null;
                }
                
                if (!$this-&amp;gt;_acl-&amp;gt;isAllowed($role, $resource, $action)) {
                        if (!$this-&amp;gt;_auth-&amp;gt;hasIdentity()) {
                                $module = $this-&amp;gt;_noauth[&#39;module&#39;];
                                $controller = $this-&amp;gt;_noauth[&#39;controller&#39;];
                                $action = $this-&amp;gt;_noauth[&#39;action&#39;];
                        } else {
                                $module = $this-&amp;gt;_noacl[&#39;module&#39;];
                                $controller = $this-&amp;gt;_noacl[&#39;controller&#39;];
                                $action = $this-&amp;gt;_noacl[&#39;action&#39;];
                        }
                }
                
                $request-&amp;gt;setModuleName($module);
                $request-&amp;gt;setControllerName($controller);
                $request-&amp;gt;setActionName($action);
        }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;ZEND_ROOT/db/config.sql&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;DROP TABLE IF EXISTS acl_array;
DROP TABLE IF EXISTS acl_roles;
DROP TABLE IF EXISTS acl_resources;
DROP TABLE IF EXISTS acl_access;
DROP TRIGGER IF EXISTS update_acl_roles;
DROP TRIGGER IF EXISTS update_acl_roles_access;
DROP TRIGGER IF EXISTS update_acl_roles_parent;
DROP TRIGGER IF EXISTS update_acl_resources_owner;
DROP TRIGGER IF EXISTS update_acl_access_role;

PRAGMA auto_vacuum = 1;
PRAGMA encoding = &amp;quot;UTF-8&amp;quot;;

BEGIN TRANSACTION;
CREATE TABLE IF NOT EXISTS acl_roles (role TEXT(50) NOT NULL,parent TEXT(50) default NULL, type Boolean DEFAULT NULL);

CREATE TABLE IF NOT EXISTS acl_resources (owner TEXT(50) NOT NULL,
resource TEXT(50) NOT NULL,parent TEXT(50) default NULL);

CREATE TABLE IF NOT EXISTS acl_access (role TEXT(50) NOT NULL,
resource TEXT(50) DEFAULT NULL, privilege Text(50) DEFAULT NULL, 
allow Boolean DEFAULT NULL, chain INTEGER DEFAULT NULL, type Boolean DEFAULT NULL);

CREATE TRIGGER update_acl_roles_parent UPDATE OF parent ON acl_roles 
        BEGIN UPDATE acl_roles SET parent = new.role WHERE parent = old.role;
        END;
CREATE TRIGGER update_acl_resources_owner UPDATE OF owner ON acl_resources 
        BEGIN UPDATE acl_resources SET owner = new.role WHERE owner = old.role; 
        END;
CREATE TRIGGER update_acl_access_role UPDATE OF role ON acl_access 
        BEGIN UPDATE acl_access SET role = new.role WHERE role = old.role; 
        END;


INSERT INTO &amp;quot;acl_roles&amp;quot; VALUES (&#39;admin&#39;,NULL,1);
INSERT INTO &amp;quot;acl_roles&amp;quot; VALUES (&#39;guest&#39;,NULL,1);
INSERT INTO &amp;quot;acl_roles&amp;quot; VALUES (&#39;member&#39;,NULL,1);
INSERT INTO &amp;quot;acl_roles&amp;quot; VALUES (&#39;developer&#39;,&#39;member&#39;,1);

INSERT INTO &amp;quot;acl_resources&amp;quot; VALUES (&#39;system&#39;,&#39;index&#39;,NULL);
INSERT INTO &amp;quot;acl_resources&amp;quot; VALUES (&#39;system&#39;,&#39;safe&#39;,NULL);
INSERT INTO &amp;quot;acl_resources&amp;quot; VALUES (&#39;system&#39;,&#39;login&#39;,&#39;safe&#39;);
INSERT INTO &amp;quot;acl_resources&amp;quot; VALUES (&#39;system&#39;,&#39;registration&#39;,&#39;safe&#39;);
INSERT INTO &amp;quot;acl_resources&amp;quot; VALUES (&#39;system&#39;,&#39;admin&#39;,&#39;safe&#39;);

INSERT INTO &amp;quot;acl_access&amp;quot; VALUES (&#39;admin&#39;,NULL,NULL,1,NULL,1);
INSERT INTO &amp;quot;acl_access&amp;quot; VALUES (&#39;guest&#39;,&#39;index&#39;,NULL,1,1,1);
INSERT INTO &amp;quot;acl_access&amp;quot; VALUES (&#39;guest&#39;,&#39;safe&#39;,NULL,NULL,2,1);
INSERT INTO &amp;quot;acl_access&amp;quot; VALUES (&#39;guest&#39;,&#39;login&#39;,NULL,1,3,1);
INSERT INTO &amp;quot;acl_access&amp;quot; VALUES (&#39;guest&#39;,&#39;registration&#39;,NULL,1,4,1);
INSERT INTO &amp;quot;acl_access&amp;quot; VALUES (&#39;member&#39;,&#39;safe&#39;,NULL,1,1,1);
INSERT INTO &amp;quot;acl_access&amp;quot; VALUES (&#39;member&#39;,&#39;login&#39;,NULL,NULL,2,1);
INSERT INTO &amp;quot;acl_access&amp;quot; VALUES (&#39;member&#39;,&#39;registration&#39;,NULL,NULL,3,1);
COMMIT;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>jgdb</title>
      <link>http://www.robotamer.com/code/go/gotamer/jgdb.html</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/code/go/gotamer/jgdb.html</guid>
      <description>&lt;h2&gt;About the implementation:&lt;/h2&gt;

&lt;p&gt;This project is in alha state!&lt;/p&gt;

&lt;h3&gt;Object Types&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Tuple (In Memory Database) &lt;em&gt;Beta&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;List (Single file persistent database) &lt;em&gt;Beta&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Object (Multi file persistent database) &lt;em&gt;Alpha&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Cache (Cache for Tuple) &lt;em&gt;Not yet implemented&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Backends&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Json&lt;/li&gt;
&lt;li&gt;Glob &lt;em&gt;Not yet implemented&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The major distinction between &lt;em&gt;List&lt;/em&gt; and &lt;em&gt;Object&lt;/em&gt; is that one, the &lt;em&gt;List type&lt;/em&gt; uses a single file as backend with each record placed in one line.&lt;br /&gt;
Where as the &lt;em&gt;Object&lt;/em&gt; type keeps each record in a separate file. The object type will keep track of these records with an index file, and also optionally with a strtree for fast in memory access.&lt;/p&gt;

&lt;h4&gt;How the List type works:&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;The user creates a struct to his/her needs&lt;/li&gt;
&lt;li&gt;The database inherits that struct via an &lt;em&gt;Interface&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The database converts that struct to include the map id using &lt;em&gt;jsonListStruct&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;jsonListStruct struct is used to Marshal the data in to a json file&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;What is planed so far:&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Create a cache system with a user defined limit that keeps the most asked for items in a Tuple, as of now all data is being imported in to a Tuple.&lt;/li&gt;
&lt;li&gt;Create the vcs (git) backup store for the json backend&lt;/li&gt;
&lt;li&gt;Distribute with git push and pull&lt;/li&gt;
&lt;li&gt;Keep an open line of communication with glob between nodes&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;Disadvantage:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;git is not the fastest distribution system&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Advantage:&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;All data is kept in plain text/json&lt;/li&gt;
&lt;li&gt;Backups are incremental, distributed and under version control.&lt;/li&gt;
&lt;li&gt;Distributed system. without the need for the master and slave concept.&lt;/li&gt;
&lt;li&gt;Every node is independent of the overall system, and can function even if all others fail.&lt;/li&gt;
&lt;li&gt;Database can get very big, bigger then what the memory can hold, and we will read less active data with io.Reader and bufio&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;FAQ&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;To get a proper distributed system you need a merge strategy for your git repositories. How would you solve conflicts?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As with everything I am open to suggestions, meanwhile I am planing following:&lt;br /&gt;
The strategy will differ by List or Object type database.&lt;br /&gt;
For example the List type database will not have any update only insert and delete.
The insert operation will easily be resolved by git, when nodes do their pull, save, add, commit and push cycle.&lt;/p&gt;

&lt;p&gt;When it comes to the delete operation, every node will before deleting a record, add lock on the file it plans to modify. Each node will be able to lock a file at pull time.
This means other nodes can still modify and commit all other files, just not the one locked by a node.
The lock will have a time limit as it does only takes a short time to perform a full cycle of pull, save, add, commit and push with git.&lt;/p&gt;

&lt;h3&gt;Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.robotamer.com/code/go/gotamer/jgdb.html&#34; title=&#34;Website&#34;&gt;Website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://go.pkgdoc.org/bitbucket.org/gotamer/jgdb&#34; title=&#34;GoTamer Pkg Documentation&#34;&gt;Pkg Documantation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bitbucket.org/gotamer/jgdb&#34; title=&#34;GoTamer Repository&#34;&gt;Repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bitbucket.org/gotamer/jgdb/issues&#34; title=&#34;Bug Tracking&#34;&gt;Bug Tracking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cfg</title>
      <link>http://www.robotamer.com/code/go/gotamer/cfg.html</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/code/go/gotamer/cfg.html</guid>
      <description>&lt;h3&gt;Features:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can define your config items in your application as a struct.&lt;/li&gt;
&lt;li&gt;You can save a json template of your struct&lt;/li&gt;
&lt;li&gt;You can save runtime modifications to the config&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Docs:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;import &amp;quot;bitbucket.org/gotamer/cfg&amp;quot;

func Load(filename string, o interface{}) (err error)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Load gets your config from the json file, and fills your struct with the option&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func Save(filename string, o interface{}) (err error)   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save will save your struct to the given filename, this is a good way to create a json template&lt;/p&gt;

&lt;h3&gt;Example:&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;go&#34;&gt;    package main

    import (
        &amp;quot;fmt&amp;quot;
        &amp;quot;bitbucket.org/gotamer/cfg&amp;quot;
        &amp;quot;os&amp;quot;
    )

    var Cfg *MainCfg

    type MainCfg struct {
        Name  string
    }

    func main() {
        Cfg = &amp;amp;MainCfg{&amp;quot;defaultAlias&amp;quot;}
        cfgpath := os.Getenv(&amp;quot;GOPATH&amp;quot;) + &amp;quot;/etc/myappname.json&amp;quot;
        err := cfg.Load(cfgpath, Cfg)
        if err != nil {
            cfg.Save(cfgpath, Cfg)
            fmt.Println(&amp;quot;\n\tPlease edit your configuration at: &amp;quot;, cfgpath, &amp;quot;\n&amp;quot;)
            os.Exit(0)
        }
        fmt.Printf(&amp;quot;%s&amp;quot;, Cfg)
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bitbucket.org/gotamer/cfg&#34; title=&#34;Repository&#34;&gt;Repository&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A Gopher named Gophy</title>
      <link>http://www.robotamer.com/code/go/gotamer/index.html</link>
      <pubDate>Tue, 01 Jan 2008 00:00:00 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/code/go/gotamer/index.html</guid>
      <description>&lt;p&gt;If you are just starting out with Go, head over to the &lt;a href=&#34;http://play.golang.org/p/fjK_EoQDtR&#34; title=&#34;Go Playground&#34;&gt;Go Playground&lt;/a&gt; and concentrate on
figuring out how my little &lt;a href=&#34;http://play.golang.org/p/fjK_EoQDtR&#34; title=&#34;Go Playground&#34;&gt;Go Story&lt;/a&gt; works.
It&amp;rsquo;s about a Gopher, named Gophy who joint the Gophers but lost his identity in the process.&lt;br /&gt;
Once you get how he gets his identity back you&amp;rsquo;ll be golden.&lt;/p&gt;

&lt;p&gt;Here is the code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type I interface{}

var gophers map[uint]I = make(map[uint]I)

type gopher struct {
    Name string
}

func main() {

    g := AddToGophers(&amp;quot;Goghy&amp;quot;)

    fmt.Printf(&amp;quot;Hello, %s\n&amp;quot;, g.Name)
    fmt.Printf(&amp;quot;Now %s is a %T, %s\n&amp;quot;, g.Name, gophers[1], gophers[1])

    gg := GetGopher(1)
    fmt.Printf(&amp;quot;Bye, %s\n&amp;quot;, gg.Name)
}

func GetGopher(i uint) *gopher {
    g := gophers[i]
    // I wont my gopher identity back
    return g.(*gopher)
}

func AddToGophers(n string) gopher {
    g := new(gopher)
    g.Name = n
    gophers[1] = g
    return *g
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
