<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Php on RoboTamer </title>
    <link>http://www.robotamer.com/tags/php.xml</link>
    <language>en-us</language>
    <author>Dennis T Kaplan</author>
    <rights>Copyright (c) 2008 - 2013, Dennis T Kaplan; all rights reserved.</rights>
    <updated>2012-07-13 20:45:12 &#43;0000 UTC</updated>
    
    <item>
      <title>Read Folder</title>
      <link>http://www.robotamer.com/code/php/read-folder.html</link>
      <pubDate>Fri, 13 Jul 2012 20:45:12 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/code/php/read-folder.html</guid>
      <description>&lt;p&gt;This is a &lt;em&gt;Lambda&lt;/em&gt; function also called anonymous function within a regular function that scans a given directory and it&amp;rsquo;s sub directories returning an array of all php files within.&lt;/p&gt;

&lt;p&gt;Following is a snip output of the Zend files.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[6] =&amp;gt; /usr/share/php/Zend/Captcha/ReCaptcha.php
[7] =&amp;gt; /usr/share/php/Zend/Captcha/Base.php
[8] =&amp;gt; /usr/share/php/Zend/Feed/Rss.php
[9] =&amp;gt; /usr/share/php/Zend/Feed/Atom.php
[52] =&amp;gt; /usr/share/php/Zend/Feed/Writer/Source.php
[53] =&amp;gt; /usr/share/php/Zend/Feed/Pubsubhubbub.php
[54] =&amp;gt; /usr/share/php/Zend/Feed/Element.php
[55] =&amp;gt; /usr/share/php/Zend/Feed/Reader/Feed/Rss.php
[90] =&amp;gt; /usr/share/php/Zend/Feed/Builder.php
[91] =&amp;gt; /usr/share/php/Zend/Feed/Writer.php
[92] =&amp;gt; /usr/share/php/Zend/Config.php
[93] =&amp;gt; /usr/share/php/Zend/Json/Server.php
[94] =&amp;gt; /usr/share/php/Zend/Json/Exception.php
[95] =&amp;gt; /usr/share/php/Zend/Json/Encoder.php
[865] =&amp;gt; /usr/share/php/Zend/View/Stream.php
[866] =&amp;gt; /usr/share/php/Zend/View/Interface.php
[867] =&amp;gt; /usr/share/php/Zend/View/Abstract.php
[868] =&amp;gt; /usr/share/php/Zend/Search/Exception.php
[869] =&amp;gt; /usr/share/php/Zend/Search/Lucene.php
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php

/**
 *
 * @param string $dir
 * @return array 
 */
function get_php_files_in_dir($dir)
{
    $bin = array ();
    $run = function(&amp;amp;$run, $dir, &amp;amp;$bin) {
        if ($handle = opendir($dir)) {
            while (false !== ($file = readdir($handle))) {
                if ($file != &amp;quot;.&amp;quot; &amp;amp;&amp;amp; $file != &amp;quot;..&amp;quot;) {
                    if (strpos($file, &#39;.php&#39;) &amp;gt; 0) {
                        $bin[] = $dir . &#39;/&#39; . $file;
                    } elseif (is_dir($dir . &#39;/&#39; . $file)) {
                        $run($run, $dir . &#39;/&#39; . $file, $bin);
                    }
                }
            }
        }
        closedir($handle);
    };
    $run($run, $dir, $bin);
    return $bin;
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/robotamer/3107221#file-get_php_files_in_dir-php&#34;&gt;gist id=3107221&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Autoload</title>
      <link>http://www.robotamer.com/code/php/autoload.html</link>
      <pubDate>Sun, 01 Jul 2012 07:37:41 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/code/php/autoload.html</guid>
      <description>&lt;p&gt;I have been looking around for some good examples to use the new PHP autoloader interoperability standard according to the PHP Standards Recommendation #0 (PSR-0).&lt;/p&gt;

&lt;p&gt;And since I could find anything good, I had to figure it out by my self, here is the result.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/robotamer/3027247&#34;&gt;gist id=3027247&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HowTo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;    &amp;lt;?php
    # Adds your library to the beginning of the php include path
    addInclude(&#39;~/code/libs&#39;, FALSE);

    $loader = new SplClassLoader();

    # adds the php include path to the class
    $loader-&amp;gt;setIncludePathLookup(true);

    $loader-&amp;gt;add(&#39;Zend&#39;);
    $loader-&amp;gt;add(&#39;PEAR&#39;);

    # Give the path if it isn&#39;t in the php include path like this
    $loader-&amp;gt;add(&#39;Symfony&#39;, &#39;/path/to/symfony&#39;);

    $loader -&amp;gt; register();
    ?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php
/**
 * SplClassLoader implementation that implements the technical interoperability
 * standards for PHP 5.3 namespaces and class names.
 *
 * https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md
 *
 * Example usage:
 *
 *     $classLoader = new \SplClassLoader();
 *
 *     // Configure the SplClassLoader to act normally or silently
 *     $classLoader-&amp;gt;setMode(\SplClassLoader::MODE_NORMAL);
 *
 *     // Add a namespace of classes
 *     $classLoader-&amp;gt;add(&#39;Doctrine&#39;, array(
 *         &#39;/path/to/doctrine-common&#39;, &#39;/path/to/doctrine-dbal&#39;, &#39;/path/to/doctrine-orm&#39;
 *     ));
 *
 *     // Add a prefix
 *     $classLoader-&amp;gt;add(&#39;Swift&#39;, &#39;/path/to/swift&#39;);
 *
 *     // Add a prefix through PEAR1 convention, requiring include_path lookup
 *     $classLoader-&amp;gt;add(&#39;PEAR&#39;);
 *
 *     // Allow to PHP use the include_path for file path lookup
 *     $classLoader-&amp;gt;setIncludePathLookup(true);
 *
 *     // Possibility to change the default php file extension
 *     $classLoader-&amp;gt;setFileExtension(&#39;.php&#39;);
 *
 *     // Register the autoloader, prepending it in the stack
 *     $classLoader-&amp;gt;register(true);
 *
 * @author Guilherme Blanco &amp;lt;guilhermeblanco@php.net&amp;gt;
 * @author Jonathan H. Wage &amp;lt;jonwage@gmail.com&amp;gt;
 * @author Roman S. Borschel &amp;lt;roman@code-factory.org&amp;gt;
 * @author Matthew Weier O&#39;Phinney &amp;lt;matthew@zend.com&amp;gt;
 * @author Kris Wallsmith &amp;lt;kris.wallsmith@gmail.com&amp;gt;
 * @author Fabien Potencier &amp;lt;fabien.potencier@symfony-project.org&amp;gt;
 */
 
include &#39;SplAutoloader.php&#39;;
class SplClassLoader implements SplAutoloader
{
    /**
     * @var string
     */
    private $fileExtension = &#39;.php&#39;;
 
    /**
     * @var boolean
     */
    private $includePathLookup = false;
 
    /**
     * @var array
     */
    private $resources = array();
 
    /**
     * @var integer
     */
    private $mode = self::MODE_NORMAL;
 
    /**
     * {@inheritdoc}
     */
    public function setMode($mode)
    {
        if ($mode &amp;amp; self::MODE_SILENT &amp;amp;&amp;amp; $mode &amp;amp; self::MODE_NORMAL) {
            throw new \InvalidArgumentException(
                sprintf(&#39;Cannot have %s working normally and silently at the same time!&#39;, __CLASS__)
            );
        }
 
        $this-&amp;gt;mode = $mode;
    }
 
    /**
     * Define the file extension of resource files in the path of this class loader.
     *
     * @param string $fileExtension
     */
    public function setFileExtension($fileExtension)
    {
        $this-&amp;gt;fileExtension = $fileExtension;
    }
 
    /**
     * Retrieve the file extension of resource files in the path of this class loader.
     *
     * @return string
     */
    public function getFileExtension()
    {
        return $this-&amp;gt;fileExtension;
    }
 
    /**
     * Turns on searching the include for class files. Allows easy loading installed PEAR packages.
     *
     * @param boolean $includePathLookup
     */
    public function setIncludePathLookup($includePathLookup)
    {
        $this-&amp;gt;includePathLookup = $includePathLookup;
    }
 
    /**
     * Gets the base include path for all class files in the namespace of this class loader.
     *
     * @return boolean
     */
    public function getIncludePathLookup()
    {
        return $this-&amp;gt;includePathLookup;
    }
 
    /**
     * {@inheritdoc}
     */
    public function register($prepend = false)
    {
        spl_autoload_register(array($this, &#39;load&#39;), true, $prepend);
    }
 
    /**
     * {@inheritdoc}
     */
    public function unregister()
    {
        spl_autoload_unregister(array($this, &#39;load&#39;));
    }
 
    /**
     * {@inheritdoc}
     */
    public function add($resource, $resourcePath = null)
    {
        $this-&amp;gt;resources[$resource] = (array) $resourcePath;
    }
 
    /**
     * {@inheritdoc}
     */
    public function load($resourceName)
    {
        $resourceAbsolutePath = $this-&amp;gt;getResourceAbsolutePath($resourceName);
 
        switch (true) {
            case ($this-&amp;gt;mode &amp;amp; self::MODE_SILENT):
                if ($resourceAbsolutePath !== false) {
                    require $resourceAbsolutePath;
                }
                break;
 
            case ($this-&amp;gt;mode &amp;amp; self::MODE_NORMAL):
            default:
                require $resourceAbsolutePath;
                break;
        }
 
        if ($this-&amp;gt;mode &amp;amp; self::MODE_DEBUG &amp;amp;&amp;amp; ! $this-&amp;gt;isResourceDeclared($resourceName)) {
            throw new \RuntimeException(
                sprintf(&#39;Autoloader expected resource &amp;quot;%s&amp;quot; to be declared in file &amp;quot;%s&amp;quot;.&#39;, $resourceName, $resourceAbsolutePath)
            );
        }
    }
 
    /**
     * Transform resource name into its absolute resource path representation.
     *
     * @params string $resourceName
     *
     * @return string Resource absolute path.
     */
    private function getResourceAbsolutePath($resourceName)
    {
        $resourceRelativePath = $this-&amp;gt;getResourceRelativePath($resourceName);
 
        foreach ($this-&amp;gt;resources as $resource =&amp;gt; $resourcesPath) {
            if (strpos($resourceName, $resource) !== 0) {
                continue;
            }
 
            foreach ($resourcesPath as $resourcePath) {
                $resourceAbsolutePath = $resourcePath . DIRECTORY_SEPARATOR . $resourceRelativePath;
 
                if (is_file($resourceAbsolutePath)) {
                    return $resourceAbsolutePath;
                }
            }
        }
 
        if ($this-&amp;gt;includePathLookup &amp;amp;&amp;amp; ($resourceAbsolutePath = stream_resolve_include_path($resourceRelativePath)) !== false) {
            return $resourceAbsolutePath;
        }
 
        return false;
    }
 
    /**
     * Transform resource name into its relative resource path representation.
     *
     * @params string $resourceName
     *
     * @return string Resource relative path.
     */
    private function getResourceRelativePath($resourceName)
    {
        // We always work with FQCN in this context
        $resourceName = ltrim($resourceName, &#39;\\&#39;);
        $resourcePath = &#39;&#39;;
 
        if (($lastNamespacePosition = strrpos($resourceName, &#39;\\&#39;)) !== false) {
            // Namespaced resource name
            $resourceNamespace = substr($resourceName, 0, $lastNamespacePosition);
            $resourceName      = substr($resourceName, $lastNamespacePosition + 1);
            $resourcePath      =  str_replace(&#39;\\&#39;, DIRECTORY_SEPARATOR, $resourceNamespace) . DIRECTORY_SEPARATOR;
        }
 
        return $resourcePath . str_replace(&#39;_&#39;, DIRECTORY_SEPARATOR, $resourceName) . $this-&amp;gt;fileExtension;
    }
 
    /**
     * Check if resource is declared in user space.
     *
     * @params string $resourceName
     *
     * @return boolean
     */
    private function isResourceDeclared($resourceName)
    {
        return class_exists($resourceName, false)
            || interface_exists($resourceName, false)
            || (function_exists(&#39;trait_exists&#39;) &amp;amp;&amp;amp; trait_exists($resourceName, false));
    }
}

?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;
&amp;lt;?php
/**
 * Adds a directory to the php include path
 */

/**
 * @category   RoboTamer
 * @package    Functions
 * @subpackage File
 * @author     Dennis T Kaplan
 * @copyright  Copyright (c) 2008 - 2012 Dennis T Kaplan
 * @license    http://www.opensource.org/licenses/MIT
 * @link       http://blog.robotamer.com
 *
 * @param string  $dir The directory to add to the path
 * @param boolean $at_end If true, place this directory at the end of the include path. Otherwise, place it at the beginning.
 */
function addInclude($dir, $at_end = TRUE)
{
    $exist = file_exists($dir);
    if ( ! $exist || ($exist &amp;amp;&amp;amp; filetype($dir) != &#39;dir&#39;))
    {
        trigger_error(&amp;quot;Include path &#39;{$dir}&#39; does not exist&amp;quot;, E_USER_WARNING);
        echo &#39;&amp;lt;pre&amp;gt;&#39;; print_r(debug_backtrace()); echo &#39;&amp;lt;/pre&amp;gt;&#39;;
        exit;
    }
    $dir   = rtrim($dir, &amp;quot;/&amp;quot;);
    $paths = ltrim(get_include_path(), &amp;quot;.&amp;quot;.PATH_SEPARATOR);
    $paths = explode(PATH_SEPARATOR, $paths);
    $ds    = &#39;.&#39;.PATH_SEPARATOR;
    if (strlen($paths[0]) &amp;amp;&amp;amp; array_search($dir, $paths) === false) {
        $at_end ? array_push($paths, $dir) : array_unshift($paths, $dir);
        $paths = implode(PATH_SEPARATOR, $paths);
        set_include_path($ds.$paths);
    } else {
        set_include_path($ds.$dir);
    }
}
/* #Test it
echo get_include_path();
echo &#39;&amp;lt;br /&amp;gt;&#39;;
addInclude(&#39;/var/www/library/&#39;);
echo get_include_path();
echo &#39;&amp;lt;br /&amp;gt;&#39;;
*/
?&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php

function autoload($className)
{
    $className = ltrim($className, &#39;\\&#39;);
    $fileName  = &#39;&#39;;
    $namespace = &#39;&#39;;
 
    if ($lastNsPos = strripos($className, &#39;\\&#39;)) {
        $namespace = substr($className, 0, $lastNsPos);
        $className = substr($className, $lastNsPos + 1);
        $fileName  = str_replace(&#39;\\&#39;, DIRECTORY_SEPARATOR, $namespace) . DIRECTORY_SEPARATOR;
    }
 
    $fileName .= str_replace(&#39;_&#39;, DIRECTORY_SEPARATOR, $className) . &#39;.php&#39;;
 
    require $fileName;
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Messenger Laravel Framework</title>
      <link>http://www.robotamer.com/blog/2012-06-27-messenger-laravel-framework.html</link>
      <pubDate>Wed, 27 Jun 2012 23:27:29 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/blog/2012-06-27-messenger-laravel-framework.html</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://blog.robotamer.com/wp-content/uploads/2012/06/laravel.png&#34; alt=&#34;Laravel Framework&#34; /&gt;
 This is a fork and upgrade of the &lt;a href=&#34;http://forums.laravel.com/profile.php?id=583&#34;&gt;davzie&lt;/a&gt; message class.
A info, error etc messenger class that allows you to add validation errors, statuses etc to flash data and then retrieve them in a nicely formatted way in your front-end. Automates the process a little when you&amp;rsquo;re adding and retrieving messages, especially in a CRUD type environment. The formatting integrates well with Twitter&amp;rsquo;s Bootstrap Alert formatting.&lt;/p&gt;

&lt;p&gt;This upgraded version works smoothly with the Laravel validation class&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/robotamer/3007511#file-msg-php&#34;&gt;gist id=3007511&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php

class Msg {

     public static $msgss = array();

     /**
      * Add a message to the message array (adds to the user&#39;s session)
      * @param string  $type    You can have several types of messages, these are class names for Bootstrap&#39;s messaging classes, usually, info, error, success, warning
      * @param string $message  The message you want to add to the list
      */
     public static function add($type = &#39;info&#39;, $message = FALSE){
         if(!$message) return FALSE;
         if(is_array($message)){
             foreach($message as $msg){
                 static::$msgss[$type][] = $msg;
             }
         }else{
             static::$msgss[$type][] = $message;
         }
         Session::flash(&#39;messages&#39;, static::$msgss);
     }

     /**
      * Pull back those messages from the session
      * @return array
      */
     public static function get(){
         return (Session::has(&#39;messages&#39;)) ? Session::get(&#39;messages&#39;) : FALSE;
     }
    
     /**
      * Gets all the messages from the session and formats them accordingly for Twitter bootstrap.
      * @return string
      */
     public static function getHtml(){
         $output = FALSE;
         if (Session::has(&#39;messages&#39;)){
             $messages = Session::get(&#39;messages&#39;);
             foreach($messages as $type =&amp;gt; $msgs){
                 if(is_integer($type)) $type = &#39;error&#39;;
                 $output .= &#39;&amp;lt;div class=&amp;quot;alert alert-&#39;.$type.&#39;&amp;quot;&amp;gt;&amp;lt;a class=&amp;quot;close&amp;quot; data-dismiss=&amp;quot;alert&amp;quot;&amp;gt;×&amp;lt;/a&amp;gt;&#39;;
                 if(is_array($msgs)){
                 foreach($msgs as $msg) $output .= &#39;&amp;lt;p&amp;gt;&#39;.$msg.&#39;&amp;lt;/p&amp;gt;&#39;;
                 }else{
                      $output .= &#39;&amp;lt;p&amp;gt;&#39;.$msgs.&#39;&amp;lt;/p&amp;gt;&#39;;
                 }
                 $output .= &#39;&amp;lt;/div&amp;gt;&#39;;
             }
         }
         return $output;
     }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Multiple PHP installations</title>
      <link>http://www.robotamer.com/code/php/2011-06-20-multiple-php-installations-so-you-can-run-5-3-x-on-one-box.html</link>
      <pubDate>Mon, 20 Jun 2011 11:58:00 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/code/php/2011-06-20-multiple-php-installations-so-you-can-run-5-3-x-on-one-box.html</guid>
      <description>&lt;p&gt;How to install &lt;strong&gt;PHP 5.3.X&lt;/strong&gt; as secondary php version from source&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;PHPV=5.3.6
cd /usr/local/src
wget http://us.php.net/get/php-$PHPV.tar.gz/from/this/mirror
mv mirror php-$PHPV.tar.gz
tar xzvf php-$PHPV.tar.gz
chown -R $USER:$USER php-$PHPV/
cd php-$PHPV/

apt-get install libxml2-dev libssl-dev libcurl4-gnutls-dev libjpeg62-dev libpng12-dev libfreetype6-dev unixodbc-dev

./configure 
  --prefix=/usr/local/php5.3 
  --with-config-file-path=/usr/local/etc/php5.3 
  --with-config-file-scan-dir=/usr/local/etc/php5.3/$SAPIconf.d 
  --with-libdir=/lib 
  --disable-cgi 
  --with-libxml-dir=/usr/ 
  --with-mysql=/usr/ 
  --enable-pdo 
  --with-pdo-mysql 
  --with-mysqli 
  --with-zlib-dir=/usr 
  --with-curl 
  --with-gd 
  --with-jpeg-dir=/usr/lib 
  --with-png-dir=/usr/lib 
  --with-freetype-dir=/usr/lib 
  --with-gettext 
  --enable-mbstring 
  --enable-soap 
  --enable-ftp 
  --enable-fpm 
  --with-openssl

make
make test
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;More help in case you have errors:
&lt;a href=&#34;http://www.robo47.net/text/6-PHP-Configure-und-Compile-Fehler&#34;&gt;PHP-Configure-und-Compile-Fehler&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>fixing php&#39;s gettype function</title>
      <link>http://www.robotamer.com/blog/2011-06-17-fixing-phps-gettype-function.html</link>
      <pubDate>Fri, 17 Jun 2011 10:10:09 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/blog/2011-06-17-fixing-phps-gettype-function.html</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php    

public static function getType($value, $max_length = 50){

    $type = gettype($value);

    if($type == &#39;NULL&#39;
            || $type == &#39;boolean&#39;
            || $type == &#39;integer&#39;
            || $type == &#39;double&#39;
            || $type == &#39;object&#39;
            || $type == &#39;resource&#39;
            || $type == &#39;array&#39;
        )
        return array(&#39;type&#39;=&amp;gt;$type,&#39;value&#39;=&amp;gt;$value);

    if($type == &#39;string&#39; &amp;amp;&amp;amp; empty($value))
        return array(&#39;type&#39;=&amp;gt;&#39;NULL&#39;,&#39;value&#39;=&amp;gt;$value);

    if($type == &#39;string&#39; &amp;amp;&amp;amp; strlen($value) &amp;gt; $max_length)
        return array(&#39;type&#39;=&amp;gt;&#39;blob&#39;,&#39;value&#39;=&amp;gt;$value);

    if($type == &#39;string&#39; &amp;amp;&amp;amp; substr($value, 0,1) === &#39;0&#39;)
        return array(&#39;type&#39;=&amp;gt;&#39;string&#39;,&#39;value&#39;=&amp;gt;$value);

    if($type == &#39;string&#39; &amp;amp;&amp;amp; is_numeric($value)){
        $int   = (int) $value;
        $float = (float) $value;

        if($int == $value){
            $value = $int;
            $type = &#39;integer&#39;;
        }elseif($float == $value){
            $value = $float;
            $type = &#39;double&#39;;
        }
    }elseif($type == &#39;string&#39;){
        $type = &#39;string&#39;;
    }else{
        $type = &#39;blob&#39;;
    }
    return array(&#39;type&#39;=&amp;gt;$type,&#39;value&#39;=&amp;gt;$value);
}
    
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>num_row with PDO</title>
      <link>http://www.robotamer.com/blog/2011-06-10-num_row-with-pdo.html</link>
      <pubDate>Fri, 10 Jun 2011 06:33:51 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/blog/2011-06-10-num_row-with-pdo.html</guid>
      <description>&lt;p&gt;There is no num_row() function for PHP PDO&lt;/p&gt;

&lt;p&gt;Here are my two solutions:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;One with prepare &amp;amp; execute&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db-&amp;gt;prepare($sql);
$sth-&amp;gt;execute(array($key));
$rows = $sth-&amp;gt;fetch(PDO::FETCH_NUM);
echo $rows[0];
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;One with query:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;db-&amp;gt;query($sql);
$row = $result-&amp;gt;fetch(PDO::FETCH_NUM);
echo $row[0];
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>e() for echo</title>
      <link>http://www.robotamer.com/blog/2011-06-01-echo.html</link>
      <pubDate>Wed, 01 Jun 2011 02:01:27 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/blog/2011-06-01-echo.html</guid>
      <description>&lt;p&gt;It&amp;rsquo;s really annoying having to thing of html stuff like pre &amp;amp; br everytime you need to display something.&lt;/p&gt;

&lt;p&gt;And it&amp;rsquo;s even worst if you like me test your code in cli and cgi.&lt;/p&gt;

&lt;p&gt;So I wrote this little method to take care of it all. It&amp;rsquo;s nothing complicated but sure useful.&lt;/p&gt;

&lt;p&gt;It detects cgi and cli, and formats everything accordingly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;    
&amp;lt;?php
/**
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see http://www.gnu.org/licenses/
**/

/**
 * e() --- Prints human-readable information about a variable
 *
 * string e ( mixed $expression[, string $name [, bool $return = false ]] )
 *
 * Replacement for php echo, print, print_r(), var_export() etc
 */

/**
 * @category    TaMeR
 * @copyright   Copyright (c) 2008 - 2011 Dennis T Kaplan
 * @license     http://www.gnu.org/licenses/gpl.txt
 * @link        http://github.com/pzzazz/TaMeR
 * @author      Dennis T Kaplan
 * @date        May 1, 2011
 * @version     1.0
 * @access      public
 * @param       mixed   $var
 * @param       string  $name
 * @param       boolean $return
 * @return      string
 **/
function e($var, $name = FALSE, $return = FALSE) {
    $preO = $preC = &#39;&#39;; $br = PHP_EOL;
    if( ! isset($_SERVER[&#39;argv&#39;])){
        $preO = &#39;

&#39;; $preC = &#39;&#39;;
        $h1O = &#39;&amp;lt;h1&amp;gt;&#39;;   $h1C = &#39;&amp;lt;/h1&amp;gt;&#39;;
        $br = &#39;&amp;lt;br&amp;gt;&amp;lt;/br&amp;gt;&#39;.PHP_EOL;
    }
    if(!is_array($var) &amp;amp;&amp;amp; !is_object($var))
    {
        if ($name !== FALSE) echo $br.$name.&#39;: &#39;;
        echo (isset($_SERVER[&#39;argv&#39;]))
                  ? $var.$br
                  : htmlspecialchars($var).$br;
    }else{
        if($return === FALSE) {
            if ($name !== FALSE) echo $br.$h1O.$name.&#39;: &#39;.$h1C;
            echo $preO.print_r($var, TRUE).$preC.$br;
        }else{
            if ($name !== FALSE){
                return &#39;&#39;;
            }else{
                return $br.$preO.var_export($var, TRUE).$preC.$br;
            }
        }
    }
}
?&amp;gt;
    
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Creating models for the Zend Framework from command line via phpcli</title>
      <link>http://www.robotamer.com/blog/2010-03-18-creating-models-for-the-zend-framework-from-command-line-via-phpcli.html</link>
      <pubDate>Thu, 18 Mar 2010 22:07:15 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/blog/2010-03-18-creating-models-for-the-zend-framework-from-command-line-via-phpcli.html</guid>
      <description>&lt;p&gt;This is a php cli script that will create a database model from the database provided&lt;/p&gt;

&lt;p&gt;Download via git from &lt;a href=&#34;http://github.com/pzzazz/phpcli&#34;&gt;github -&amp;gt; phpcli&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;php zend/model.php -h

This is a command line PHP script.

Set table

Options:
-path=[ ]
-table=[ ]

Usage:
php zend/model.php -arg=value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Database Structure:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE TABLE users (
      Alias TEXT UNIQUE,
      Password TEXT,
      eMail TEXT,
      Avatar TEXT,
      Timezone TEXT,
      IP TEXT,
      count INTEGER,
      cookie TEXT,
      vars TEXT,
      status INTEGER DEFAULT 1,
      added date,
      updated datetime,
      PRIMARY KEY(Alias)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Sample Output:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ php zend/model.php -path=/var/www/TaMeR/data/tmp.db3 -table=users






class _Model_users
{
    protected $_Alias;
    protected $_Password;
    protected $_eMail;
    protected $_Avatar;
    protected $_Timezone;
    protected $_IP;
    protected $_count;
    protected $_cookie;
    protected $_vars;
    protected $_status;
    protected $_added;
    protected $_updated;


    public function setAlias($Alias){
        $this-&amp;gt;_Alias = (string) $Alias;
        return $this;
    }

    public function getAlias($Alias){
        return $this-&amp;gt;_Alias;
    }

    public function setPassword($Password){
        $this-&amp;gt;_Password = (string) $Password;
        return $this;
    }

    public function getPassword($Password){
        return $this-&amp;gt;_Password;
    }

    public function seteMail($eMail){
        $this-&amp;gt;_eMail = (string) $eMail;
        return $this;
    }

    public function geteMail($eMail){
        return $this-&amp;gt;_eMail;
    }

    public function setAvatar($Avatar){
        $this-&amp;gt;_Avatar = (string) $Avatar;
        return $this;
    }

    public function getAvatar($Avatar){
        return $this-&amp;gt;_Avatar;
    }

    public function setTimezone($Timezone){
        $this-&amp;gt;_Timezone = (string) $Timezone;
        return $this;
    }

    public function getTimezone($Timezone){
        return $this-&amp;gt;_Timezone;
    }

    public function setIP($IP){
        $this-&amp;gt;_IP = (string) $IP;
        return $this;
    }

    public function getIP($IP){
        return $this-&amp;gt;_IP;
    }

    public function setcount($count){
        $this-&amp;gt;_count = (int) $count;
        return $this;
    }

    public function getcount($count){
        return $this-&amp;gt;_count;
    }

    public function setcookie($cookie){
        $this-&amp;gt;_cookie = (string) $cookie;
        return $this;
    }

    public function getcookie($cookie){
        return $this-&amp;gt;_cookie;
    }

    public function setvars($vars){
        $this-&amp;gt;_vars = (string) $vars;
        return $this;
    }

    public function getvars($vars){
        return $this-&amp;gt;_vars;
    }

    public function setstatus($status){
        $this-&amp;gt;_status = (int) $status;
        return $this;
    }

    public function getstatus($status){
        return $this-&amp;gt;_status;
    }

    public function setadded($added){
        $this-&amp;gt;_added = (string) $added;
        return $this;
    }

    public function getadded($added){
        return $this-&amp;gt;_added;
    }

    public function setupdated($updated){
        $this-&amp;gt;_updated = (string) $updated;
        return $this;
    }

    public function getupdated($updated){
        return $this-&amp;gt;_updated;
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Creating models for the Zend Framework from command line via phpcli.</title>
      <link>http://www.robotamer.com/blog/2010-03-18-7.html</link>
      <pubDate>Thu, 18 Mar 2010 20:20:00 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/blog/2010-03-18-7.html</guid>
      <description>&lt;p&gt;Creating models for the Zend Framework from command line via phpcli.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;php zend/model.php -h&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is a command line PHP script.&lt;/p&gt;

&lt;p&gt;Set table&lt;/p&gt;

&lt;p&gt;Options:
    -path=[ ]
    -table=[ ]&lt;/p&gt;

&lt;p&gt;Usage:
php zend/model.php -arg=value&lt;/p&gt;

&lt;p&gt;&lt;code&gt;~/phpcli$ php zend/model.php -path=/var/www/TaMeR/data/tmp.db3 -table=users&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Sample Output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Database Structure:
    CREATE TABLE users (
    Alias TEXT UNIQUE,
    Password TEXT,
    eMail TEXT,
    Avatar TEXT,
    Timezone TEXT,
    IP TEXT,
    count INTEGER,
    cookie TEXT,
    vars TEXT,
    status INTEGER DEFAULT 1,
    added date,
    updated datetime,
    PRIMARY KEY(Alias)
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~/phpcli$ php zend/model.php -path=/var/www/TaMeR/data/tmp.db3 -table=user
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-
    class _Model_users
    {
    protected $_Alias;
    protected $_Password;
    protected $_eMail;
    protected $_Avatar;
    protected $_Timezone;
    protected $_IP;
    protected $_count;
    protected $_cookie;
    protected $_vars;
    protected $_status;
    protected $_added;
    protected $_updated;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public function setAlias($Alias){
    $this-&amp;gt;_Alias = (string) $Alias;
    return $this;
}

public function getAlias($Alias){
    return $this-&amp;gt;_Alias;
}

public function setPassword($Password){
    $this-&amp;gt;_Password = (string) $Password;
    return $this;
}

public function getPassword($Password){
    return $this-&amp;gt;_Password;
}

public function seteMail($eMail){
    $this-&amp;gt;_eMail = (string) $eMail;
    return $this;
}

public function geteMail($eMail){
    return $this-&amp;gt;_eMail;
}

public function setAvatar($Avatar){
    $this-&amp;gt;_Avatar = (string) $Avatar;
    return $this;
}

public function getAvatar($Avatar){
    return $this-&amp;gt;_Avatar;
}

public function setTimezone($Timezone){
    $this-&amp;gt;_Timezone = (string) $Timezone;
    return $this;
}

public function getTimezone($Timezone){
    return $this-&amp;gt;_Timezone;
}

public function setIP($IP){
    $this-&amp;gt;_IP = (string) $IP;
    return $this;
}

public function getIP($IP){
    return $this-&amp;gt;_IP;
}

public function setcount($count){
    $this-&amp;gt;_count = (int) $count;
    return $this;
}

public function getcount($count){
    return $this-&amp;gt;_count;
}

public function setcookie($cookie){
    $this-&amp;gt;_cookie = (string) $cookie;
    return $this;
}

public function getcookie($cookie){
    return $this-&amp;gt;_cookie;
}

public function setvars($vars){
    $this-&amp;gt;_vars = (string) $vars;
    return $this;
}

public function getvars($vars){
    return $this-&amp;gt;_vars;
}

public function setstatus($status){
    $this-&amp;gt;_status = (int) $status;
    return $this;
}

public function getstatus($status){
    return $this-&amp;gt;_status;
}

public function setadded($added){
    $this-&amp;gt;_added = (string) $added;
    return $this;
}

public function getadded($added){
    return $this-&amp;gt;_added;
}

public function setupdated($updated){
    $this-&amp;gt;_updated = (string) $updated;
    return $this;
}

public function getupdated($updated){
    return $this-&amp;gt;_updated;
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>PHP goto statement</title>
      <link>http://www.robotamer.com/blog/php-goto.html</link>
      <pubDate>Sat, 13 Mar 2010 16:15:00 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/blog/php-goto.html</guid>
      <description>&lt;p&gt;I just discovered that the &lt;a href=&#34;http://www.php.net/manual/en/control-structures.goto.php&#34;&gt;goto statement&lt;/a&gt;
is available since php 5.3&lt;br /&gt;
I love the guys from php for that.&lt;br /&gt;
I am a hobby programmer and unlike the processionals, I learned OOP via php, which is great but
having &lt;a href=&#34;http://www.php.net/manual/en/control-structures.goto.php&#34;&gt;goto&lt;/a&gt; available like back in the Amiga days made my day.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Zend ACL</title>
      <link>http://www.robotamer.com/blog/2008-04-27-21.html</link>
      <pubDate>Sun, 27 Apr 2008 19:50:00 UTC</pubDate>
      <author>Dennis T Kaplan</author>
      <guid>http://www.robotamer.com/blog/2008-04-27-21.html</guid>
      <description>&lt;p&gt;Tamer_ACL is a simple Zend Framework ACL plugin that uses the sqlite backend to store all the data.&lt;/p&gt;

&lt;h4&gt;How To Inatall&lt;/h4&gt;

&lt;p&gt;Make sure you have a table called &lt;strong&gt;role&lt;/strong&gt; in your authentication table and a table called &lt;strong&gt;alias&lt;/strong&gt; you may change that to username if you like. The sql code is below.&lt;br /&gt;
Below are the files.&lt;br /&gt;
Before each file you will find installation instructions that should work even for the most novice Linux / Zend Framework developer.&lt;/p&gt;

&lt;h4&gt;Resources&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.phpclasses.org/browse/package/4100.html&#34;&gt;phpclasses.org&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/tamer&#34;&gt;Google code / REPO&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Todo&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Admin Backend&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4&gt;ZEND_ROOT/backstrap.php&lt;/h4&gt;

&lt;p&gt;Create acl object&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;include_once &amp;quot;Tamer/Acl.php&amp;quot;;
$acl = new Tamer_Acl();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Add the Tamer_Plugin_Auth to the Zend Front Controller&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;$front-&amp;gt;setControllerDirectory(APPS . &#39;/default/controllers&#39;)
        -&amp;gt;setBaseUrl($cfg-&amp;gt;baseUrl)
        -&amp;gt;registerPlugin(new Tamer_Plugin_Auth($auth, $acl))
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;ZEND_ROOT/library/Tamer/Acl.php&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;
&amp;lt;?php
require_once &#39;Zend/Acl.php&#39;;
require_once &#39;Zend/Acl/Role.php&#39;;
require_once &#39;Zend/Acl/Resource.php&#39;;
require_once &#39;Zend/Db/Adapter/Pdo/Sqlite.php&#39;;

class Tamer_ACL extends Zend_ACL 
{
        public $alias;
        public $role;
        
        public function __construct($alias, $role)
        {       
                $this-&amp;gt;alias = $alias;
                $this-&amp;gt;role = $role;
                $sqlite = new TamerLiteACL($alias, $role);
                $result = $sqlite-&amp;gt;getAclRows();
                foreach($result[&#39;roles&#39;] as $v){
                        $this-&amp;gt;addRoles($v);
                }
                $this-&amp;gt;addResources($result[&#39;resources&#39;]);
                $this-&amp;gt;addAccess($result[&#39;access&#39;]);
        }
        
        private function addRoles($rows)
        {
                foreach($rows as $v){
                        if($v[&#39;parent&#39;] == &#39;&#39;){
                                $this-&amp;gt;addRole(new Zend_Acl_Role($v[&#39;role&#39;]));
                        }else{
                                $this-&amp;gt;addRole(new Zend_Acl_Role($v[&#39;role&#39;]), $v[&#39;parent&#39;]);
                        }
                }
        }
        
        private function addResources($rows)
        {
                foreach($rows as $v){
                        if($v[&#39;parent&#39;] == &#39;&#39;){
                                $this-&amp;gt;add(new Zend_Acl_Resource($v[&#39;resource&#39;]));
                        }else{
                                $this-&amp;gt;add(new Zend_Acl_Resource($v[&#39;resource&#39;]), $v[&#39;parent&#39;]);
                        }
                }
        }

        private function addAccess($rows)
        {
                foreach($rows as $v){
                        if($v[&#39;allow&#39;] == 1){
                                $this-&amp;gt;allow($v[&#39;role&#39;], $v[&#39;resource&#39;], $v[&#39;privilege&#39;]);
                        }else{
                                $this-&amp;gt;deny($v[&#39;role&#39;], $v[&#39;resource&#39;], $v[&#39;privilege&#39;]);
                        }
                }
        }
}


class TamerLiteACL 
{
        private $_sqlite_name = &#39;/db/config.db&#39;;
        private $_alias;
        private $_role;
        private $_result;
        
        public function __construct($alias, $role)
        {       
                $this-&amp;gt;_alias = $alias;
                $this-&amp;gt;_role = $role;
                
                try{
                        $this-&amp;gt;_sqliteAdapter = new Zend_Db_Adapter_Pdo_Sqlite(array(&#39;dbname&#39; =&amp;gt; ROOT.$this-&amp;gt;_sqlite_name));
                        $this-&amp;gt;_sqliteAdapter-&amp;gt;getConnection();
                } catch (Zend_Db_Adapter_Exception $e) {
                        echo &#39;adapter&amp;lt;pre&amp;gt;&#39;.$e-&amp;gt;getMessage().&#39;&amp;lt;/pre&amp;gt;&#39;;
                } catch (Zend_Exception $e) {
                        echo &#39;adapter&amp;lt;pre&amp;gt;&#39;.$e-&amp;gt;getMessage().&#39;&amp;lt;/pre&amp;gt;&#39;;
                }
                $this-&amp;gt;_sqliteAdapter-&amp;gt;getProfiler()-&amp;gt;setEnabled(true);

                $select = $this-&amp;gt;_sqliteAdapter-&amp;gt;select()
                                        -&amp;gt;from(&#39;acl_roles&#39;, array(&#39;role&#39;, &#39;parent&#39;))
                                        -&amp;gt;where(&#39;type = ?&#39;, 1);
                
                $stmt = $this-&amp;gt;_sqliteAdapter-&amp;gt;query($select);
                $this-&amp;gt;_result[&#39;roles&#39;][&#39;system&#39;] = $stmt-&amp;gt;fetchAll();
                
                $select = $this-&amp;gt;_sqliteAdapter-&amp;gt;select()
                                        -&amp;gt;from(&#39;acl_roles&#39;, array(&#39;role&#39;, &#39;parent&#39;))
                                        -&amp;gt;where(&#39;role = ?&#39;, $this-&amp;gt;_alias)
                                        -&amp;gt;orwhere(&#39;parent = ?&#39;, $this-&amp;gt;_alias);
                
                $stmt = $this-&amp;gt;_sqliteAdapter-&amp;gt;query($select);
                $this-&amp;gt;_result[&#39;roles&#39;][&#39;alias&#39;] = $stmt-&amp;gt;fetchAll();
                
                $stmt = $this-&amp;gt;_sqliteAdapter-&amp;gt;query(
                &amp;quot;SELECT resource, parent FROM acl_resources WHERE owner = &#39;system&#39; OR owner = ?&amp;quot;, $this-&amp;gt;_alias);
                $this-&amp;gt;_result[&#39;resources&#39;] = $rows = $stmt-&amp;gt;fetchAll();
                
                $stmt = $this-&amp;gt;_sqliteAdapter-&amp;gt;query(&#39;SELECT allow, role, resource, privilege FROM acl_access WHERE type = 1 ORDER BY chain&#39;);
                $this-&amp;gt;_result[&#39;access&#39;] = $rows = $stmt-&amp;gt;fetchAll();

                $this-&amp;gt;_sqliteAdapter-&amp;gt;closeConnection();
        }
        
        public function getAclRows()
        {
                return $this-&amp;gt;_result;
        }
}




class aclCreate extends Zend_ACL 
{
        public function __construct()
        {
                $this-&amp;gt;add(new Zend_Acl_Resource(&#39;index&#39;));
                $this-&amp;gt;add(new Zend_Acl_Resource(&#39;safe&#39;));
                $this-&amp;gt;add(new Zend_Acl_Resource(&#39;login&#39;), &#39;safe&#39;);
                $this-&amp;gt;add(new Zend_Acl_Resource(&#39;registration&#39;), &#39;safe&#39;);
                $this-&amp;gt;add(new Zend_Acl_Resource(&#39;password&#39;), &#39;safe&#39;);
                
                $this-&amp;gt;addRole(new Zend_Acl_Role(&#39;guest&#39;));
                $this-&amp;gt;deny(&#39;guest&#39;, &#39;safe&#39;, NULL);
                $this-&amp;gt;allow(&#39;guest&#39;, &#39;registration&#39;);
                $this-&amp;gt;allow(&#39;guest&#39;, &#39;login&#39;);
                $this-&amp;gt;deny(&#39;guest&#39;, &#39;password&#39;);
                $this-&amp;gt;allow(&#39;guest&#39;,&#39;index&#39;);
                
                $this-&amp;gt;addRole(new Zend_Acl_Role(&#39;member&#39;));
                $this-&amp;gt;allow(&#39;member&#39;, &#39;safe&#39;, NULL);
                
                $this-&amp;gt;addRole(new Zend_Acl_Role(&#39;admin&#39;));
                $this-&amp;gt;allow(&#39;admin&#39;);
        }

}

class TamerFile_ACL
{
        /*
        @ Call like this from bootstrap
                include_once &amp;quot;Tamer/Acl.php&amp;quot;;
                $acl = new Tamer_Acl();
                $acl = new aclCreate();
                $acl = $acl-&amp;gt;aclCheck();
        */
        protected $aclCfg;
        
        private $_sqlite_name = &#39;/db/config.db&#39;;
        private $_sqliteAdapter;
        private $_table; //Sqlite Table
        
        public $old = FALSE;

        public function __construct()
        {
                $this-&amp;gt;aclCfg = ROOT.&#39;/library/Tamer/Acl.php&#39;;

                try{
                        $this-&amp;gt;_sqliteAdapter = new Zend_Db_Adapter_Pdo_Sqlite(array(&#39;dbname&#39; =&amp;gt; ROOT.$this-&amp;gt;_sqlite_name));
                        $this-&amp;gt;_sqliteAdapter-&amp;gt;getConnection();
                } catch (Zend_Db_Adapter_Exception $e) {
                        echo &#39;adapter&amp;lt;pre&amp;gt;&#39;.$e-&amp;gt;getMessage().&#39;&amp;lt;/pre&amp;gt;&#39;;
                } catch (Zend_Exception $e) {
                        echo &#39;adapter&amp;lt;pre&amp;gt;&#39;.$e-&amp;gt;getMessage().&#39;&amp;lt;/pre&amp;gt;&#39;;
                }
                //$this-&amp;gt;dropTable();
                //$this-&amp;gt;makeTable();
                //$this-&amp;gt;aclCheck();
        }
        
        public function aclCheck()
        {
                $ftime = filemtime($this-&amp;gt;aclCfg);
                $sql = &#39;SELECT time FROM acl_array WHERE time = ?&#39;;
                if($this-&amp;gt;_result = $this-&amp;gt;_sqliteAdapter-&amp;gt;fetchRow($sql, $ftime)){     
                        return  $this-&amp;gt;aclGet();
                }else{
                        $acl = new aclCreate();
                        $this-&amp;gt;aclDelete();
                        $this-&amp;gt;aclSave($acl);
                        return $acl;
                }
        }

        public function aclGet()
        {
                $sql = &#39;SELECT acl FROM acl_array WHERE time = ?&#39;;
                $ftime = filemtime($this-&amp;gt;aclCfg);
                $this-&amp;gt;_result = $this-&amp;gt;_sqliteAdapter-&amp;gt;fetchRow($sql, $ftime);
                $this-&amp;gt;_sqliteAdapter-&amp;gt;closeConnection();
                
                return unserialize($this-&amp;gt;_result[&#39;acl&#39;]);
        }
        
        public function aclSave($array)
        {
                $filemtime = filemtime($this-&amp;gt;aclCfg);
                $array = serialize($array);
                $data = array(&#39;time&#39;=&amp;gt;$filemtime,&#39;acl&#39;=&amp;gt;$array);
                $this-&amp;gt;_sqliteAdapter-&amp;gt;insert(&#39;acl_array&#39;, $data);
                $this-&amp;gt;_sqliteAdapter-&amp;gt;closeConnection();
        }

        public function aclDelete()
        {
                $this-&amp;gt;_sqliteAdapter-&amp;gt;delete(&#39;acl_array&#39;);
                $this-&amp;gt;_sqliteAdapter-&amp;gt;closeConnection();
        }

        
        /**
         * creates the db table
         *
         * @param array $fields
         */
        public function dropTable()
        {
            $this-&amp;gt;_result = $this-&amp;gt;_sqliteAdapter-&amp;gt;getConnection()-&amp;gt;exec(&#39;DROP TABLE acl_array&#39;);
                $this-&amp;gt;_sqliteAdapter-&amp;gt;closeConnection();
        }
        
        /**
         * creates the db table
         *
         * @param array $fields
         */
        public function makeTable()
        {
                $sql[] = &#39;CREATE TABLE IF NOT EXISTS acl_roles (role TEXT(50) NOT NULL,parent TEXT(50) default NULL)&#39;;
                $sql[] = &#39;CREATE TABLE IF NOT EXISTS acl_resources (resource TEXT(50) NOT NULL,parent TEXT(50) default NULL)&#39;;
                $sql[] = &#39;CREATE TABLE IF NOT EXISTS acl_access (role TEXT(50) NOT NULL,resource  Text(50) NOT NULL,privilege Text(50),allow Boolean NOT NULL DEFAULT 0)&#39;;
                $sql[] = &#39;CREATE table IF NOT EXISTS acl_array(time INTEGER PRIMARY KEY, acl TEXT)&#39;;
                foreach($sql as $v){
                        $this-&amp;gt;_sqliteAdapter-&amp;gt;query($v);
                }
                $this-&amp;gt;_table = true;
                $this-&amp;gt;_sqliteAdapter-&amp;gt;closeConnection();
        }       
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;ZEND_ROOT/library/Tamer/Plugin/Auth.php&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;php&#34;&gt;&amp;lt;?php

class Tamer_Plugin_Auth extends Zend_Controller_Plugin_Abstract
{
        private $_auth;
        private $_acl;
        
        private $_noauth = array(&#39;module&#39; =&amp;gt; &#39;safe&#39;,
                                                        &#39;controller&#39; =&amp;gt; &#39;login&#39;,
                                                        &#39;action&#39; =&amp;gt; &#39;index&#39;);
        
        private $_noacl = array(&#39;module&#39; =&amp;gt; &#39;default&#39;,
                                                        &#39;controller&#39; =&amp;gt; &#39;error&#39;,
                                                        &#39;action&#39; =&amp;gt; &#39;privileges&#39;);
        
        public function __construct($auth, $acl)
        {
                $this-&amp;gt;_auth = $auth;
                $this-&amp;gt;_acl = $acl;
        }
        
        public function preDispatch(Zend_Controller_Request_Abstract $request)
        {
                if ($this-&amp;gt;_auth-&amp;gt;hasIdentity()) {
                        $role = $this-&amp;gt;_auth-&amp;gt;getIdentity()-&amp;gt;role;
                } else {
                        $role = &#39;guest&#39;;
                }

                $controller = $request-&amp;gt;controller;
                $action         = $request-&amp;gt;action;
                $module         = $request-&amp;gt;module;
                $resource       = $controller;
                
                if (!$this-&amp;gt;_acl-&amp;gt;has($resource)) {
                        $resource = null;
                }
                
                if (!$this-&amp;gt;_acl-&amp;gt;isAllowed($role, $resource, $action)) {
                        if (!$this-&amp;gt;_auth-&amp;gt;hasIdentity()) {
                                $module = $this-&amp;gt;_noauth[&#39;module&#39;];
                                $controller = $this-&amp;gt;_noauth[&#39;controller&#39;];
                                $action = $this-&amp;gt;_noauth[&#39;action&#39;];
                        } else {
                                $module = $this-&amp;gt;_noacl[&#39;module&#39;];
                                $controller = $this-&amp;gt;_noacl[&#39;controller&#39;];
                                $action = $this-&amp;gt;_noacl[&#39;action&#39;];
                        }
                }
                
                $request-&amp;gt;setModuleName($module);
                $request-&amp;gt;setControllerName($controller);
                $request-&amp;gt;setActionName($action);
        }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;ZEND_ROOT/db/config.sql&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;sql&#34;&gt;DROP TABLE IF EXISTS acl_array;
DROP TABLE IF EXISTS acl_roles;
DROP TABLE IF EXISTS acl_resources;
DROP TABLE IF EXISTS acl_access;
DROP TRIGGER IF EXISTS update_acl_roles;
DROP TRIGGER IF EXISTS update_acl_roles_access;
DROP TRIGGER IF EXISTS update_acl_roles_parent;
DROP TRIGGER IF EXISTS update_acl_resources_owner;
DROP TRIGGER IF EXISTS update_acl_access_role;

PRAGMA auto_vacuum = 1;
PRAGMA encoding = &amp;quot;UTF-8&amp;quot;;

BEGIN TRANSACTION;
CREATE TABLE IF NOT EXISTS acl_roles (role TEXT(50) NOT NULL,parent TEXT(50) default NULL, type Boolean DEFAULT NULL);

CREATE TABLE IF NOT EXISTS acl_resources (owner TEXT(50) NOT NULL,
resource TEXT(50) NOT NULL,parent TEXT(50) default NULL);

CREATE TABLE IF NOT EXISTS acl_access (role TEXT(50) NOT NULL,
resource TEXT(50) DEFAULT NULL, privilege Text(50) DEFAULT NULL, 
allow Boolean DEFAULT NULL, chain INTEGER DEFAULT NULL, type Boolean DEFAULT NULL);

CREATE TRIGGER update_acl_roles_parent UPDATE OF parent ON acl_roles 
        BEGIN UPDATE acl_roles SET parent = new.role WHERE parent = old.role;
        END;
CREATE TRIGGER update_acl_resources_owner UPDATE OF owner ON acl_resources 
        BEGIN UPDATE acl_resources SET owner = new.role WHERE owner = old.role; 
        END;
CREATE TRIGGER update_acl_access_role UPDATE OF role ON acl_access 
        BEGIN UPDATE acl_access SET role = new.role WHERE role = old.role; 
        END;


INSERT INTO &amp;quot;acl_roles&amp;quot; VALUES (&#39;admin&#39;,NULL,1);
INSERT INTO &amp;quot;acl_roles&amp;quot; VALUES (&#39;guest&#39;,NULL,1);
INSERT INTO &amp;quot;acl_roles&amp;quot; VALUES (&#39;member&#39;,NULL,1);
INSERT INTO &amp;quot;acl_roles&amp;quot; VALUES (&#39;developer&#39;,&#39;member&#39;,1);

INSERT INTO &amp;quot;acl_resources&amp;quot; VALUES (&#39;system&#39;,&#39;index&#39;,NULL);
INSERT INTO &amp;quot;acl_resources&amp;quot; VALUES (&#39;system&#39;,&#39;safe&#39;,NULL);
INSERT INTO &amp;quot;acl_resources&amp;quot; VALUES (&#39;system&#39;,&#39;login&#39;,&#39;safe&#39;);
INSERT INTO &amp;quot;acl_resources&amp;quot; VALUES (&#39;system&#39;,&#39;registration&#39;,&#39;safe&#39;);
INSERT INTO &amp;quot;acl_resources&amp;quot; VALUES (&#39;system&#39;,&#39;admin&#39;,&#39;safe&#39;);

INSERT INTO &amp;quot;acl_access&amp;quot; VALUES (&#39;admin&#39;,NULL,NULL,1,NULL,1);
INSERT INTO &amp;quot;acl_access&amp;quot; VALUES (&#39;guest&#39;,&#39;index&#39;,NULL,1,1,1);
INSERT INTO &amp;quot;acl_access&amp;quot; VALUES (&#39;guest&#39;,&#39;safe&#39;,NULL,NULL,2,1);
INSERT INTO &amp;quot;acl_access&amp;quot; VALUES (&#39;guest&#39;,&#39;login&#39;,NULL,1,3,1);
INSERT INTO &amp;quot;acl_access&amp;quot; VALUES (&#39;guest&#39;,&#39;registration&#39;,NULL,1,4,1);
INSERT INTO &amp;quot;acl_access&amp;quot; VALUES (&#39;member&#39;,&#39;safe&#39;,NULL,1,1,1);
INSERT INTO &amp;quot;acl_access&amp;quot; VALUES (&#39;member&#39;,&#39;login&#39;,NULL,NULL,2,1);
INSERT INTO &amp;quot;acl_access&amp;quot; VALUES (&#39;member&#39;,&#39;registration&#39;,NULL,NULL,3,1);
COMMIT;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
